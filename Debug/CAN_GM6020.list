
CAN_GM6020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004578  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004700  08004700  00005700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004718  08004718  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004718  08004718  00005718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004720  08004720  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004724  08004724  00005724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004728  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00000188  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000198  20000198  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b6a5  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020a7  00000000  00000000  000116e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008c8  00000000  00000000  00013790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006a0  00000000  00000000  00014058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002040a  00000000  00000000  000146f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bb8b  00000000  00000000  00034b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1b62  00000000  00000000  0004068d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001021ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000232c  00000000  00000000  00102234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00104560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046e8 	.word	0x080046e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080046e8 	.word	0x080046e8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	@ (8000d5c <MX_CAN1_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 7;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d00:	2207      	movs	r2, #7
 8000d02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000d10:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d12:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d1a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000d1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	@ (8000d58 <MX_CAN1_Init+0x64>)
 8000d46:	f000 fe19 	bl	800197c <HAL_CAN_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d50:	f000 fa92 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000002c 	.word	0x2000002c
 8000d5c:	40006400 	.word	0x40006400

08000d60 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	@ 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a21      	ldr	r2, [pc, #132]	@ (8000e04 <HAL_CAN_MspInit+0xa4>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d13b      	bne.n	8000dfa <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b20      	ldr	r3, [pc, #128]	@ (8000e08 <HAL_CAN_MspInit+0xa8>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8000e08 <HAL_CAN_MspInit+0xa8>)
 8000d8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <HAL_CAN_MspInit+0xa8>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_CAN_MspInit+0xa8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <HAL_CAN_MspInit+0xa8>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_CAN_MspInit+0xa8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dca:	2309      	movs	r3, #9
 8000dcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <HAL_CAN_MspInit+0xac>)
 8000dd6:	f001 fddd 	bl	8002994 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	2014      	movs	r0, #20
 8000de0:	f001 fd0f 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000de4:	2014      	movs	r0, #20
 8000de6:	f001 fd28 	bl	800283a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	2015      	movs	r0, #21
 8000df0:	f001 fd07 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000df4:	2015      	movs	r0, #21
 8000df6:	f001 fd20 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dfa:	bf00      	nop
 8000dfc:	3728      	adds	r7, #40	@ 0x28
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	40006400 	.word	0x40006400
 8000e08:	40023800 	.word	0x40023800
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	@ 0x28
 8000e14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e30:	f043 0301 	orr.w	r3, r3, #1
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f003 0301 	and.w	r3, r3, #1
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b27      	ldr	r3, [pc, #156]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a26      	ldr	r2, [pc, #152]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e4c:	f043 0302 	orr.w	r3, r3, #2
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b24      	ldr	r3, [pc, #144]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e68:	f043 0308 	orr.w	r3, r3, #8
 8000e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	f003 0308 	and.w	r3, r3, #8
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e84:	f043 0304 	orr.w	r3, r3, #4
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0304 	and.w	r3, r3, #4
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	603b      	str	r3, [r7, #0]
 8000e9a:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_GPIO_Init+0xd4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10, GPIO_PIN_RESET);
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	f44f 51e0 	mov.w	r1, #7168	@ 0x1c00
 8000eb8:	480b      	ldr	r0, [pc, #44]	@ (8000ee8 <MX_GPIO_Init+0xd8>)
 8000eba:	f001 ff07 	bl	8002ccc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH12 PH11 PH10 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8000ebe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ec2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4804      	ldr	r0, [pc, #16]	@ (8000ee8 <MX_GPIO_Init+0xd8>)
 8000ed8:	f001 fd5c 	bl	8002994 <HAL_GPIO_Init>

}
 8000edc:	bf00      	nop
 8000ede:	3728      	adds	r7, #40	@ 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40021c00 	.word	0x40021c00

08000eec <msp>:
 * 参数x：需要转换的值
 * 参数in：编码器的角度范围，参考0~8191
 * 参数out：计算的角度范围，参考0~360°
 */
double msp(double x, double in_min, double in_max, double out_min, double out_max)
{
 8000eec:	b5b0      	push	{r4, r5, r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	ed87 0b08 	vstr	d0, [r7, #32]
 8000ef6:	ed87 1b06 	vstr	d1, [r7, #24]
 8000efa:	ed87 2b04 	vstr	d2, [r7, #16]
 8000efe:	ed87 3b02 	vstr	d3, [r7, #8]
 8000f02:	ed87 4b00 	vstr	d4, [r7]
	return (x-in_min)*(out_max-out_min)/(in_max-in_min)+out_min;
 8000f06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f0a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000f0e:	f7ff f95f 	bl	80001d0 <__aeabi_dsub>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4614      	mov	r4, r2
 8000f18:	461d      	mov	r5, r3
 8000f1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f22:	f7ff f955 	bl	80001d0 <__aeabi_dsub>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff fb07 	bl	8000540 <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4614      	mov	r4, r2
 8000f38:	461d      	mov	r5, r3
 8000f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f3e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f42:	f7ff f945 	bl	80001d0 <__aeabi_dsub>
 8000f46:	4602      	mov	r2, r0
 8000f48:	460b      	mov	r3, r1
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	f7ff fc21 	bl	8000794 <__aeabi_ddiv>
 8000f52:	4602      	mov	r2, r0
 8000f54:	460b      	mov	r3, r1
 8000f56:	4610      	mov	r0, r2
 8000f58:	4619      	mov	r1, r3
 8000f5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f5e:	f7ff f939 	bl	80001d4 <__adddf3>
 8000f62:	4602      	mov	r2, r0
 8000f64:	460b      	mov	r3, r1
 8000f66:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f6a:	eeb0 0a47 	vmov.f32	s0, s14
 8000f6e:	eef0 0a67 	vmov.f32	s1, s15
 8000f72:	3728      	adds	r7, #40	@ 0x28
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}

08000f78 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_UART_RxCpltCallback+0x44>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d113      	bne.n	8000fb2 <HAL_UART_RxCpltCallback+0x3a>
    {
    	target_yaw_angle = receiveData;	//串口通信数据类型是uint，数据只能是正整数
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x48>)
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	ee07 3a90 	vmov	s15, r3
 8000f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_UART_RxCpltCallback+0x4c>)
 8000f98:	edc3 7a00 	vstr	s15, [r3]

    	HAL_UART_Transmit(&huart1, &receiveData, 3, 100);	//接收后反馈发送
 8000f9c:	2364      	movs	r3, #100	@ 0x64
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	4907      	ldr	r1, [pc, #28]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x48>)
 8000fa2:	4809      	ldr	r0, [pc, #36]	@ (8000fc8 <HAL_UART_RxCpltCallback+0x50>)
 8000fa4:	f002 fb6e 	bl	8003684 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, &receiveData, 3);		//再次开启接收中断
 8000fa8:	2203      	movs	r2, #3
 8000faa:	4905      	ldr	r1, [pc, #20]	@ (8000fc0 <HAL_UART_RxCpltCallback+0x48>)
 8000fac:	4806      	ldr	r0, [pc, #24]	@ (8000fc8 <HAL_UART_RxCpltCallback+0x50>)
 8000fae:	f002 fbf4 	bl	800379a <HAL_UART_Receive_IT>
    }
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	20000060 	.word	0x20000060
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	2000014c 	.word	0x2000014c
 8000fcc:	00000000 	.word	0x00000000

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f000 fc3c 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f8e4 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f7ff ff18 	bl	8000e10 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000fe0:	f7ff fe88 	bl	8000cf4 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 8000fe4:	f000 fb70 	bl	80016c8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&huart1, &receiveData, 3);	//开启串口中断接收，接收两位正数数据作为设定角度
  can_filter_init();//can初始化
 8000fe8:	f000 f94c 	bl	8001284 <can_filter_init>
  gimbal_PID_init();//PID初始化，在此函数里预设PID的参数
 8000fec:	f000 fa98 	bl	8001520 <gimbal_PID_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	//0、闪烁小灯，检测程序是否正常循环
	led_cnt ++;
 8000ff0:	4b5d      	ldr	r3, [pc, #372]	@ (8001168 <main+0x198>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	b21a      	sxth	r2, r3
 8000ffe:	4b5a      	ldr	r3, [pc, #360]	@ (8001168 <main+0x198>)
 8001000:	801a      	strh	r2, [r3, #0]
	if (led_cnt == 50)
 8001002:	4b59      	ldr	r3, [pc, #356]	@ (8001168 <main+0x198>)
 8001004:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001008:	2b32      	cmp	r3, #50	@ 0x32
 800100a:	d107      	bne.n	800101c <main+0x4c>
	{
	  	led_cnt = 0;
 800100c:	4b56      	ldr	r3, [pc, #344]	@ (8001168 <main+0x198>)
 800100e:	2200      	movs	r2, #0
 8001010:	801a      	strh	r2, [r3, #0]
	    HAL_GPIO_TogglePin(GPIOH,GPIO_PIN_10);
 8001012:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001016:	4855      	ldr	r0, [pc, #340]	@ (800116c <main+0x19c>)
 8001018:	f001 fe71 	bl	8002cfe <HAL_GPIO_TogglePin>
	}

	//PID控制
	//1、计算当前的编码器角度值，运用msp函数将编码器的值映射为弧度制
	now_yaw_angle1=msp(motor_yaw_info1.rotor_angle,0,8191,0,360);
 800101c:	4b54      	ldr	r3, [pc, #336]	@ (8001170 <main+0x1a0>)
 800101e:	889b      	ldrh	r3, [r3, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa13 	bl	800044c <__aeabi_ui2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	ed9f 4b49 	vldr	d4, [pc, #292]	@ 8001150 <main+0x180>
 800102e:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 8001158 <main+0x188>
 8001032:	ed9f 2b4b 	vldr	d2, [pc, #300]	@ 8001160 <main+0x190>
 8001036:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 8001158 <main+0x188>
 800103a:	ec43 2b10 	vmov	d0, r2, r3
 800103e:	f7ff ff55 	bl	8000eec <msp>
 8001042:	ec53 2b10 	vmov	r2, r3, d0
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fc8b 	bl	8000964 <__aeabi_d2f>
 800104e:	4603      	mov	r3, r0
 8001050:	4a48      	ldr	r2, [pc, #288]	@ (8001174 <main+0x1a4>)
 8001052:	6013      	str	r3, [r2, #0]
	now_yaw_angle2=msp(motor_yaw_info2.rotor_angle,0,8191,0,360);
 8001054:	4b48      	ldr	r3, [pc, #288]	@ (8001178 <main+0x1a8>)
 8001056:	889b      	ldrh	r3, [r3, #4]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff f9f7 	bl	800044c <__aeabi_ui2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	ed9f 4b3b 	vldr	d4, [pc, #236]	@ 8001150 <main+0x180>
 8001066:	ed9f 3b3c 	vldr	d3, [pc, #240]	@ 8001158 <main+0x188>
 800106a:	ed9f 2b3d 	vldr	d2, [pc, #244]	@ 8001160 <main+0x190>
 800106e:	ed9f 1b3a 	vldr	d1, [pc, #232]	@ 8001158 <main+0x188>
 8001072:	ec43 2b10 	vmov	d0, r2, r3
 8001076:	f7ff ff39 	bl	8000eec <msp>
 800107a:	ec53 2b10 	vmov	r2, r3, d0
 800107e:	4610      	mov	r0, r2
 8001080:	4619      	mov	r1, r3
 8001082:	f7ff fc6f 	bl	8000964 <__aeabi_d2f>
 8001086:	4603      	mov	r3, r0
 8001088:	4a3c      	ldr	r2, [pc, #240]	@ (800117c <main+0x1ac>)
 800108a:	6013      	str	r3, [r2, #0]
	//2、角度环，设定角度target_yaw_angle，通过角度差计算出需要的pid速度
	pid_calc(&gimbal_yaw_angle_pid1, target_yaw_angle, now_yaw_angle1);
 800108c:	4b3c      	ldr	r3, [pc, #240]	@ (8001180 <main+0x1b0>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <main+0x1a4>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	eef0 0a47 	vmov.f32	s1, s14
 800109c:	eeb0 0a67 	vmov.f32	s0, s15
 80010a0:	4838      	ldr	r0, [pc, #224]	@ (8001184 <main+0x1b4>)
 80010a2:	f000 f9da 	bl	800145a <pid_calc>
	pid_calc(&gimbal_yaw_angle_pid2, target_yaw_angle, now_yaw_angle2);
 80010a6:	4b36      	ldr	r3, [pc, #216]	@ (8001180 <main+0x1b0>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	4b33      	ldr	r3, [pc, #204]	@ (800117c <main+0x1ac>)
 80010ae:	ed93 7a00 	vldr	s14, [r3]
 80010b2:	eef0 0a47 	vmov.f32	s1, s14
 80010b6:	eeb0 0a67 	vmov.f32	s0, s15
 80010ba:	4833      	ldr	r0, [pc, #204]	@ (8001188 <main+0x1b8>)
 80010bc:	f000 f9cd 	bl	800145a <pid_calc>
	//3、速度环，设定速度为角度环计算的速度，通过速度差计算更新输出pid值
	pid_calc(&gimbal_yaw_speed_pid1, gimbal_yaw_angle_pid1.output, motor_yaw_info1.rotor_speed);
 80010c0:	4b30      	ldr	r3, [pc, #192]	@ (8001184 <main+0x1b4>)
 80010c2:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010c6:	4b2a      	ldr	r3, [pc, #168]	@ (8001170 <main+0x1a0>)
 80010c8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010cc:	ee07 3a10 	vmov	s14, r3
 80010d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010d4:	eef0 0a47 	vmov.f32	s1, s14
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	482b      	ldr	r0, [pc, #172]	@ (800118c <main+0x1bc>)
 80010de:	f000 f9bc 	bl	800145a <pid_calc>
	pid_calc(&gimbal_yaw_speed_pid2, gimbal_yaw_angle_pid2.output, motor_yaw_info2.rotor_speed);
 80010e2:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <main+0x1b8>)
 80010e4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <main+0x1a8>)
 80010ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010ee:	ee07 3a10 	vmov	s14, r3
 80010f2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80010f6:	eef0 0a47 	vmov.f32	s1, s14
 80010fa:	eeb0 0a67 	vmov.f32	s0, s15
 80010fe:	4824      	ldr	r0, [pc, #144]	@ (8001190 <main+0x1c0>)
 8001100:	f000 f9ab 	bl	800145a <pid_calc>
	//4、向发送PID计算后更新的电压值
	set_GM6020_motor_voltage(&hcan1,gimbal_yaw_speed_pid1.output,gimbal_yaw_speed_pid2.output);
 8001104:	4b21      	ldr	r3, [pc, #132]	@ (800118c <main+0x1bc>)
 8001106:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800110a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800110e:	ee17 3a90 	vmov	r3, s15
 8001112:	b21b      	sxth	r3, r3
 8001114:	4a1e      	ldr	r2, [pc, #120]	@ (8001190 <main+0x1c0>)
 8001116:	edd2 7a0c 	vldr	s15, [r2, #48]	@ 0x30
 800111a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111e:	ee17 2a90 	vmov	r2, s15
 8001122:	b212      	sxth	r2, r2
 8001124:	4619      	mov	r1, r3
 8001126:	481b      	ldr	r0, [pc, #108]	@ (8001194 <main+0x1c4>)
 8001128:	f000 f93e 	bl	80013a8 <set_GM6020_motor_voltage>
	//5、串口发送电机反馈的机械角度
	HAL_UART_Transmit(&huart1, &motor_yaw_info1.rotor_angle, 2, 100);
 800112c:	2364      	movs	r3, #100	@ 0x64
 800112e:	2202      	movs	r2, #2
 8001130:	4919      	ldr	r1, [pc, #100]	@ (8001198 <main+0x1c8>)
 8001132:	481a      	ldr	r0, [pc, #104]	@ (800119c <main+0x1cc>)
 8001134:	f002 faa6 	bl	8003684 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, &motor_yaw_info2.rotor_angle, 2, 100);
 8001138:	2364      	movs	r3, #100	@ 0x64
 800113a:	2202      	movs	r2, #2
 800113c:	4918      	ldr	r1, [pc, #96]	@ (80011a0 <main+0x1d0>)
 800113e:	4817      	ldr	r0, [pc, #92]	@ (800119c <main+0x1cc>)
 8001140:	f002 faa0 	bl	8003684 <HAL_UART_Transmit>
	//6、延时
	HAL_Delay(200);
 8001144:	20c8      	movs	r0, #200	@ 0xc8
 8001146:	f000 fbf5 	bl	8001934 <HAL_Delay>
	led_cnt ++;
 800114a:	e751      	b.n	8000ff0 <main+0x20>
 800114c:	f3af 8000 	nop.w
 8001150:	00000000 	.word	0x00000000
 8001154:	40768000 	.word	0x40768000
	...
 8001164:	40bfff00 	.word	0x40bfff00
 8001168:	20000054 	.word	0x20000054
 800116c:	40021c00 	.word	0x40021c00
 8001170:	20000064 	.word	0x20000064
 8001174:	20000058 	.word	0x20000058
 8001178:	20000070 	.word	0x20000070
 800117c:	2000005c 	.word	0x2000005c
 8001180:	20000000 	.word	0x20000000
 8001184:	200000e4 	.word	0x200000e4
 8001188:	20000118 	.word	0x20000118
 800118c:	2000007c 	.word	0x2000007c
 8001190:	200000b0 	.word	0x200000b0
 8001194:	2000002c 	.word	0x2000002c
 8001198:	20000068 	.word	0x20000068
 800119c:	2000014c 	.word	0x2000014c
 80011a0:	20000074 	.word	0x20000074

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0320 	add.w	r3, r7, #32
 80011ae:	2230      	movs	r2, #48	@ 0x30
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f003 fa6c 	bl	8004690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
 80011cc:	4b28      	ldr	r3, [pc, #160]	@ (8001270 <SystemClock_Config+0xcc>)
 80011ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d0:	4a27      	ldr	r2, [pc, #156]	@ (8001270 <SystemClock_Config+0xcc>)
 80011d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d8:	4b25      	ldr	r3, [pc, #148]	@ (8001270 <SystemClock_Config+0xcc>)
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <SystemClock_Config+0xd0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a21      	ldr	r2, [pc, #132]	@ (8001274 <SystemClock_Config+0xd0>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001274 <SystemClock_Config+0xd0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001200:	2302      	movs	r3, #2
 8001202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001204:	2301      	movs	r3, #1
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001208:	2310      	movs	r3, #16
 800120a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120c:	2302      	movs	r3, #2
 800120e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001210:	2300      	movs	r3, #0
 8001212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001214:	2308      	movs	r3, #8
 8001216:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001218:	23a8      	movs	r3, #168	@ 0xa8
 800121a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001220:	2304      	movs	r3, #4
 8001222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0320 	add.w	r3, r7, #32
 8001228:	4618      	mov	r0, r3
 800122a:	f001 fd83 	bl	8002d34 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001234:	f000 f820 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001244:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001248:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800124e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	2105      	movs	r1, #5
 8001256:	4618      	mov	r0, r3
 8001258:	f001 ffe4 	bl	8003224 <HAL_RCC_ClockConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001262:	f000 f809 	bl	8001278 <Error_Handler>
  }
}
 8001266:	bf00      	nop
 8001268:	3750      	adds	r7, #80	@ 0x50
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	40007000 	.word	0x40007000

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <Error_Handler+0x8>

08001284 <can_filter_init>:
 * 作用：过滤器设置为0，即无过滤
 * 备注：需要配置过滤器之后才能正常使用CAN
 * 		本程序参数参考https://blog.csdn.net/weixin_73037889/article/details/130696750
 */
void can_filter_init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800128a:	2301      	movs	r3, #1
 800128c:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800128e:	2300      	movs	r3, #0
 8001290:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001292:	2301      	movs	r3, #1
 8001294:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800129e:	2300      	movs	r3, #0
 80012a0:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	613b      	str	r3, [r7, #16]

    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4807      	ldr	r0, [pc, #28]	@ (80012d0 <can_filter_init+0x4c>)
 80012b4:	f000 fc5e 	bl	8001b74 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);	//开启CAN1
 80012b8:	4805      	ldr	r0, [pc, #20]	@ (80012d0 <can_filter_init+0x4c>)
 80012ba:	f000 fd3b 	bl	8001d34 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);	//当FIFO0中有消息的时候进入中断
 80012be:	2102      	movs	r1, #2
 80012c0:	4803      	ldr	r0, [pc, #12]	@ (80012d0 <can_filter_init+0x4c>)
 80012c2:	f000 ff6d 	bl	80021a0 <HAL_CAN_ActivateNotification>
}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	@ 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2000002c 	.word	0x2000002c

080012d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * 函数：CAN的FIFO 0中断回调函数
 * 作用：接收电机的反馈报文，并与电机结构体拼接
 * 参数：CAN的位号，即电机底部的小拨码位号
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	@ 0x30
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t             rx_data[8] = {0};
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]


  if(hcan->Instance == CAN1)		//验证一下是CAN1通道
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a2c      	ldr	r2, [pc, #176]	@ (800139c <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d151      	bne.n	8001392 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
  {
	  HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //自带接收数据函数。
 80012ee:	f107 030c 	add.w	r3, r7, #12
 80012f2:	f107 0214 	add.w	r2, r7, #20
 80012f6:	2100      	movs	r1, #0
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 fe2f 	bl	8001f5c <HAL_CAN_GetRxMessage>

	  switch(rx_header.StdId)
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	f240 2205 	movw	r2, #517	@ 0x205
 8001304:	4293      	cmp	r3, r2
 8001306:	d004      	beq.n	8001312 <HAL_CAN_RxFifo0MsgPendingCallback+0x3e>
 8001308:	f240 2206 	movw	r2, #518	@ 0x206
 800130c:	4293      	cmp	r3, r2
 800130e:	d020      	beq.n	8001352 <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
//	  			motor_yaw_info2.temperate      =   rx_data2[6];					 //温度
//	  			break;
//	  		}
//	  	}
  }
}
 8001310:	e03f      	b.n	8001392 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
				motor_yaw_info1.rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);//角度，角度值范围：0 ~ 8191
 8001312:	7b3b      	ldrb	r3, [r7, #12]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	b21a      	sxth	r2, r3
 8001318:	7b7b      	ldrb	r3, [r7, #13]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001324:	809a      	strh	r2, [r3, #4]
				motor_yaw_info1.rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);//速度，转速值单位：rpm
 8001326:	7bbb      	ldrb	r3, [r7, #14]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	b21b      	sxth	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b21a      	sxth	r2, r3
 8001334:	4b1a      	ldr	r3, [pc, #104]	@ (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001336:	80da      	strh	r2, [r3, #6]
				motor_yaw_info1.torque_current = ((rx_data[4] << 8) | rx_data[5]);//转矩电流
 8001338:	7c3b      	ldrb	r3, [r7, #16]
 800133a:	021b      	lsls	r3, r3, #8
 800133c:	b21a      	sxth	r2, r3
 800133e:	7c7b      	ldrb	r3, [r7, #17]
 8001340:	b21b      	sxth	r3, r3
 8001342:	4313      	orrs	r3, r2
 8001344:	b21a      	sxth	r2, r3
 8001346:	4b16      	ldr	r3, [pc, #88]	@ (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8001348:	811a      	strh	r2, [r3, #8]
				motor_yaw_info1.temperate      =   rx_data[6];					 //温度
 800134a:	7cba      	ldrb	r2, [r7, #18]
 800134c:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800134e:	729a      	strb	r2, [r3, #10]
				break;
 8001350:	e01f      	b.n	8001392 <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
				motor_yaw_info2.rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);//角度，角度值范围：0 ~ 8191
 8001352:	7b3b      	ldrb	r3, [r7, #12]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	7b7b      	ldrb	r3, [r7, #13]
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001364:	809a      	strh	r2, [r3, #4]
				motor_yaw_info2.rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);//速度，转速值单位：rpm
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001376:	80da      	strh	r2, [r3, #6]
				motor_yaw_info2.torque_current = ((rx_data[4] << 8) | rx_data[5]);//转矩电流
 8001378:	7c3b      	ldrb	r3, [r7, #16]
 800137a:	021b      	lsls	r3, r3, #8
 800137c:	b21a      	sxth	r2, r3
 800137e:	7c7b      	ldrb	r3, [r7, #17]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8001388:	811a      	strh	r2, [r3, #8]
				motor_yaw_info2.temperate      =   rx_data[6];					 //温度
 800138a:	7cba      	ldrb	r2, [r7, #18]
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 800138e:	729a      	strb	r2, [r3, #10]
				break;
 8001390:	bf00      	nop
}
 8001392:	bf00      	nop
 8001394:	3730      	adds	r7, #48	@ 0x30
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40006400 	.word	0x40006400
 80013a0:	20000064 	.word	0x20000064
 80013a4:	20000070 	.word	0x20000070

080013a8 <set_GM6020_motor_voltage>:
 * 参数2：v1控制ID1的电机
 * 参数3：v2控制ID2的电机
 * 备注：一台电机使用tx_data的两位数据
 */
void set_GM6020_motor_voltage(CAN_HandleTypeDef* hcan,int16_t v1,int16_t v2)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	@ 0x28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	460b      	mov	r3, r1
 80013b2:	807b      	strh	r3, [r7, #2]
 80013b4:	4613      	mov	r3, r2
 80013b6:	803b      	strh	r3, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;
  uint8_t             tx_data[8] = {0};		//中间量，可写入8位控制数据
 80013b8:	2300      	movs	r3, #0
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]

  tx_header.StdId = 0x1ff;			//标准ID的电机控制报文的标识符
 80013c0:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80013c4:	613b      	str	r3, [r7, #16]
  tx_header.IDE   = CAN_ID_STD;		//标准帧
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  tx_header.RTR   = CAN_RTR_DATA;	//数据帧
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
  tx_header.DLC   = 8;				//数据长度
 80013ce:	2308      	movs	r3, #8
 80013d0:	623b      	str	r3, [r7, #32]

  tx_data[0] = (v1>>8)&0xff;		//控制ID1的电机
 80013d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013d6:	121b      	asrs	r3, r3, #8
 80013d8:	b21b      	sxth	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	723b      	strb	r3, [r7, #8]
  tx_data[1] =    (v1)&0xff;		//数据帧的第0、1位
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	727b      	strb	r3, [r7, #9]

  tx_data[2] = (v2>>8)&0xff;		//控制ID2的电机
 80013e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013e8:	121b      	asrs	r3, r3, #8
 80013ea:	b21b      	sxth	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	72bb      	strb	r3, [r7, #10]
  tx_data[3] =    (v2)&0xff;		//数据帧的第2、3位
 80013f0:	883b      	ldrh	r3, [r7, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	72fb      	strb	r3, [r7, #11]

  HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data, (uint32_t*)CAN_TX_MAILBOX0);
 80013f6:	f107 0208 	add.w	r2, r7, #8
 80013fa:	f107 0110 	add.w	r1, r7, #16
 80013fe:	2301      	movs	r3, #1
 8001400:	4803      	ldr	r0, [pc, #12]	@ (8001410 <set_GM6020_motor_voltage+0x68>)
 8001402:	f000 fcdb 	bl	8001dbc <HAL_CAN_AddTxMessage>
}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	@ 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000002c 	.word	0x2000002c

08001414 <pid_init>:
              float kp,
              float ki,
              float kd,
              float i_max,
              float out_max)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6178      	str	r0, [r7, #20]
 800141c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001420:	edc7 0a03 	vstr	s1, [r7, #12]
 8001424:	ed87 1a02 	vstr	s2, [r7, #8]
 8001428:	edc7 1a01 	vstr	s3, [r7, #4]
 800142c:	ed87 2a00 	vstr	s4, [r7]
  pid->kp      = kp;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	601a      	str	r2, [r3, #0]
  pid->ki      = ki;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	605a      	str	r2, [r3, #4]
  pid->kd      = kd;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	609a      	str	r2, [r3, #8]
  pid->i_max   = i_max;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	60da      	str	r2, [r3, #12]
  pid->out_max = out_max;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	611a      	str	r2, [r3, #16]
}
 800144e:	bf00      	nop
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <pid_calc>:
 * 参数1：PID结构体指针
 * 参数2：target_value设定值
 * 参数3：feedback_value反馈值
 */
float pid_calc(pid_struct_t *pid, float target_value, float feedback_value)
{
 800145a:	b480      	push	{r7}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	ed87 0a02 	vstr	s0, [r7, #8]
 8001466:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->target_value = target_value;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	68ba      	ldr	r2, [r7, #8]
 800146e:	615a      	str	r2, [r3, #20]
  pid->feedback_value = feedback_value;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	619a      	str	r2, [r3, #24]
  pid->err[1] = pid->err[0];//上一次误差
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	69da      	ldr	r2, [r3, #28]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	621a      	str	r2, [r3, #32]
  pid->err[0] = pid->target_value - pid->feedback_value;//本次误差
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	ed93 7a05 	vldr	s14, [r3, #20]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	edd3 7a06 	vldr	s15, [r3, #24]
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	edc3 7a07 	vstr	s15, [r3, #28]

  pid->p_out  = pid->kp * pid->err[0];//kp比例调整
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	edd3 7a07 	vldr	s15, [r3, #28]
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
  pid->i_out += pid->ki * pid->err[0];//ki积分调整
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80014bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
  pid->d_out  = pid->kd * (pid->err[0] - pid->err[1]);//kd微分调整
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	edd3 6a07 	vldr	s13, [r3, #28]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	edd3 7a08 	vldr	s15, [r3, #32]
 80014dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
  //LIMIT_MIN_MAX(pid->i_out, -pid->i_max, pid->i_max);

  pid->output = pid->p_out + pid->i_out + pid->d_out;//总输出，p+i+d
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80014f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
  //LIMIT_MIN_MAX(pid->output, -pid->out_max, pid->out_max);
  return pid->output;//函数返回值为总输出
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	ee07 3a90 	vmov	s15, r3
}
 8001512:	eeb0 0a67 	vmov.f32	s0, s15
 8001516:	3714      	adds	r7, #20
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr

08001520 <gimbal_PID_init>:
/***
 * 函数：电机角度环和速度环PID初始化赋值函数
 * 备注：只是初测出来的数据，具体还需要测试
 */
void gimbal_PID_init()
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
	//PID1赋值
	pid_init(&gimbal_yaw_angle_pid1, 7, 0.01, 0, 0, 320);//角度P=7,I=0.01,D=0
 8001524:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8001590 <gimbal_PID_init+0x70>
 8001528:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8001594 <gimbal_PID_init+0x74>
 800152c:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8001594 <gimbal_PID_init+0x74>
 8001530:	eddf 0a19 	vldr	s1, [pc, #100]	@ 8001598 <gimbal_PID_init+0x78>
 8001534:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 8001538:	4818      	ldr	r0, [pc, #96]	@ (800159c <gimbal_PID_init+0x7c>)
 800153a:	f7ff ff6b 	bl	8001414 <pid_init>
	pid_init(&gimbal_yaw_speed_pid1, 10, 0.05, 0, 30000, 30000);//速度P=10,I=0.05,D=0
 800153e:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 80015a0 <gimbal_PID_init+0x80>
 8001542:	eddf 1a17 	vldr	s3, [pc, #92]	@ 80015a0 <gimbal_PID_init+0x80>
 8001546:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001594 <gimbal_PID_init+0x74>
 800154a:	eddf 0a16 	vldr	s1, [pc, #88]	@ 80015a4 <gimbal_PID_init+0x84>
 800154e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001552:	4815      	ldr	r0, [pc, #84]	@ (80015a8 <gimbal_PID_init+0x88>)
 8001554:	f7ff ff5e 	bl	8001414 <pid_init>
	//PID2赋值
	pid_init(&gimbal_yaw_angle_pid2, 7, 0.015, 0, 0, 320);//角度P=7,I=0.01,D=0
 8001558:	ed9f 2a0d 	vldr	s4, [pc, #52]	@ 8001590 <gimbal_PID_init+0x70>
 800155c:	eddf 1a0d 	vldr	s3, [pc, #52]	@ 8001594 <gimbal_PID_init+0x74>
 8001560:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8001594 <gimbal_PID_init+0x74>
 8001564:	eddf 0a11 	vldr	s1, [pc, #68]	@ 80015ac <gimbal_PID_init+0x8c>
 8001568:	eeb1 0a0c 	vmov.f32	s0, #28	@ 0x40e00000  7.0
 800156c:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <gimbal_PID_init+0x90>)
 800156e:	f7ff ff51 	bl	8001414 <pid_init>
	pid_init(&gimbal_yaw_speed_pid2, 10, 0.05, 0, 30000, 30000);//速度P=10,I=0.05,D=0
 8001572:	ed9f 2a0b 	vldr	s4, [pc, #44]	@ 80015a0 <gimbal_PID_init+0x80>
 8001576:	eddf 1a0a 	vldr	s3, [pc, #40]	@ 80015a0 <gimbal_PID_init+0x80>
 800157a:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8001594 <gimbal_PID_init+0x74>
 800157e:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80015a4 <gimbal_PID_init+0x84>
 8001582:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001586:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <gimbal_PID_init+0x94>)
 8001588:	f7ff ff44 	bl	8001414 <pid_init>
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	43a00000 	.word	0x43a00000
 8001594:	00000000 	.word	0x00000000
 8001598:	3c23d70a 	.word	0x3c23d70a
 800159c:	200000e4 	.word	0x200000e4
 80015a0:	46ea6000 	.word	0x46ea6000
 80015a4:	3d4ccccd 	.word	0x3d4ccccd
 80015a8:	2000007c 	.word	0x2000007c
 80015ac:	3c75c28f 	.word	0x3c75c28f
 80015b0:	20000118 	.word	0x20000118
 80015b4:	200000b0 	.word	0x200000b0

080015b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b10      	ldr	r3, [pc, #64]	@ (8001604 <HAL_MspInit+0x4c>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	4a0f      	ldr	r2, [pc, #60]	@ (8001604 <HAL_MspInit+0x4c>)
 80015c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001604 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b09      	ldr	r3, [pc, #36]	@ (8001604 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	4a08      	ldr	r2, [pc, #32]	@ (8001604 <HAL_MspInit+0x4c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ea:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165e:	f000 f949 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <CAN1_RX0_IRQHandler+0x10>)
 800166e:	f000 fdbd 	bl	80021ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000002c 	.word	0x2000002c

0800167c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001680:	4802      	ldr	r0, [pc, #8]	@ (800168c <CAN1_RX1_IRQHandler+0x10>)
 8001682:	f000 fdb3 	bl	80021ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	2000002c 	.word	0x2000002c

08001690 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001694:	4802      	ldr	r0, [pc, #8]	@ (80016a0 <USART1_IRQHandler+0x10>)
 8001696:	f002 f8a5 	bl	80037e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000014c 	.word	0x2000014c

080016a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a8:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <SystemInit+0x20>)
 80016aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <SystemInit+0x20>)
 80016b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <MX_USART1_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 8001700:	f001 ff70 	bl	80035e4 <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f7ff fdb5 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000014c 	.word	0x2000014c
 8001718:	40011000 	.word	0x40011000

0800171c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	@ 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a2c      	ldr	r2, [pc, #176]	@ (80017ec <HAL_UART_MspInit+0xd0>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d152      	bne.n	80017e4 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001746:	4a2a      	ldr	r2, [pc, #168]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 8001748:	f043 0310 	orr.w	r3, r3, #16
 800174c:	6453      	str	r3, [r2, #68]	@ 0x44
 800174e:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001752:	f003 0310 	and.w	r3, r3, #16
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b24      	ldr	r3, [pc, #144]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b1d      	ldr	r3, [pc, #116]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a1c      	ldr	r2, [pc, #112]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_UART_MspInit+0xd4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001792:	2380      	movs	r3, #128	@ 0x80
 8001794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001796:	2302      	movs	r3, #2
 8001798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179e:	2303      	movs	r3, #3
 80017a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017a2:	2307      	movs	r3, #7
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a6:	f107 0314 	add.w	r3, r7, #20
 80017aa:	4619      	mov	r1, r3
 80017ac:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <HAL_UART_MspInit+0xd8>)
 80017ae:	f001 f8f1 	bl	8002994 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c0:	2303      	movs	r3, #3
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c4:	2307      	movs	r3, #7
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c8:	f107 0314 	add.w	r3, r7, #20
 80017cc:	4619      	mov	r1, r3
 80017ce:	480a      	ldr	r0, [pc, #40]	@ (80017f8 <HAL_UART_MspInit+0xdc>)
 80017d0:	f001 f8e0 	bl	8002994 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017d4:	2200      	movs	r2, #0
 80017d6:	2100      	movs	r1, #0
 80017d8:	2025      	movs	r0, #37	@ 0x25
 80017da:	f001 f812 	bl	8002802 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017de:	2025      	movs	r0, #37	@ 0x25
 80017e0:	f001 f82b 	bl	800283a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	@ 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40011000 	.word	0x40011000
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400
 80017f8:	40020000 	.word	0x40020000

080017fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001834 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001800:	f7ff ff50 	bl	80016a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001804:	480c      	ldr	r0, [pc, #48]	@ (8001838 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001808:	4a0d      	ldr	r2, [pc, #52]	@ (8001840 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800180a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800180c:	e002      	b.n	8001814 <LoopCopyDataInit>

0800180e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001812:	3304      	adds	r3, #4

08001814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001818:	d3f9      	bcc.n	800180e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800181c:	4c0a      	ldr	r4, [pc, #40]	@ (8001848 <LoopFillZerobss+0x22>)
  movs r3, #0
 800181e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001820:	e001      	b.n	8001826 <LoopFillZerobss>

08001822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001824:	3204      	adds	r2, #4

08001826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001828:	d3fb      	bcc.n	8001822 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800182a:	f002 ff39 	bl	80046a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800182e:	f7ff fbcf 	bl	8000fd0 <main>
  bx  lr    
 8001832:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800183c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001840:	08004728 	.word	0x08004728
  ldr r2, =_sbss
 8001844:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001848:	20000198 	.word	0x20000198

0800184c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800184c:	e7fe      	b.n	800184c <ADC_IRQHandler>
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <HAL_Init+0x40>)
 800185a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a0a      	ldr	r2, [pc, #40]	@ (8001890 <HAL_Init+0x40>)
 8001866:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800186a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_Init+0x40>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_Init+0x40>)
 8001872:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 ffb7 	bl	80027ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	200f      	movs	r0, #15
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff fe98 	bl	80015b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023c00 	.word	0x40023c00

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 ffcf 	bl	8002856 <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f000 ff97 	bl	8002802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000004 	.word	0x20000004
 80018ec:	2000000c 	.word	0x2000000c
 80018f0:	20000008 	.word	0x20000008

080018f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <HAL_IncTick+0x20>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_IncTick+0x24>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a04      	ldr	r2, [pc, #16]	@ (8001918 <HAL_IncTick+0x24>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	2000000c 	.word	0x2000000c
 8001918:	20000194 	.word	0x20000194

0800191c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return uwTick;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_GetTick+0x14>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	4618      	mov	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000194 	.word	0x20000194

08001934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800193c:	f7ff ffee 	bl	800191c <HAL_GetTick>
 8001940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194c:	d005      	beq.n	800195a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800194e:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <HAL_Delay+0x44>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800195a:	bf00      	nop
 800195c:	f7ff ffde 	bl	800191c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8f7      	bhi.n	800195c <HAL_Delay+0x28>
  {
  }
}
 800196c:	bf00      	nop
 800196e:	bf00      	nop
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	2000000c 	.word	0x2000000c

0800197c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e0ed      	b.n	8001b6a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff f9e0 	bl	8000d60 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f042 0201 	orr.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019b0:	f7ff ffb4 	bl	800191c <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019b6:	e012      	b.n	80019de <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019b8:	f7ff ffb0 	bl	800191c <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b0a      	cmp	r3, #10
 80019c4:	d90b      	bls.n	80019de <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2205      	movs	r2, #5
 80019d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e0c5      	b.n	8001b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0e5      	beq.n	80019b8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0202 	bic.w	r2, r2, #2
 80019fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019fc:	f7ff ff8e 	bl	800191c <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a02:	e012      	b.n	8001a2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a04:	f7ff ff8a 	bl	800191c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b0a      	cmp	r3, #10
 8001a10:	d90b      	bls.n	8001a2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2205      	movs	r2, #5
 8001a22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e09f      	b.n	8001b6a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1e5      	bne.n	8001a04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7e1b      	ldrb	r3, [r3, #24]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e007      	b.n	8001a62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	7e5b      	ldrb	r3, [r3, #25]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d108      	bne.n	8001a7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	e007      	b.n	8001a8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001a8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7e9b      	ldrb	r3, [r3, #26]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d108      	bne.n	8001aa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0220 	orr.w	r2, r2, #32
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	e007      	b.n	8001ab6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0220 	bic.w	r2, r2, #32
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7edb      	ldrb	r3, [r3, #27]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d108      	bne.n	8001ad0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0210 	bic.w	r2, r2, #16
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e007      	b.n	8001ae0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0210 	orr.w	r2, r2, #16
 8001ade:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	7f1b      	ldrb	r3, [r3, #28]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d108      	bne.n	8001afa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0208 	orr.w	r2, r2, #8
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e007      	b.n	8001b0a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f022 0208 	bic.w	r2, r2, #8
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7f5b      	ldrb	r3, [r3, #29]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d108      	bne.n	8001b24 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	e007      	b.n	8001b34 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0204 	bic.w	r2, r2, #4
 8001b32:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	ea42 0103 	orr.w	r1, r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	1e5a      	subs	r2, r3, #1
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b8a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001b8c:	7cfb      	ldrb	r3, [r7, #19]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d003      	beq.n	8001b9a <HAL_CAN_ConfigFilter+0x26>
 8001b92:	7cfb      	ldrb	r3, [r7, #19]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	f040 80be 	bne.w	8001d16 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001b9a:	4b65      	ldr	r3, [pc, #404]	@ (8001d30 <HAL_CAN_ConfigFilter+0x1bc>)
 8001b9c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001bb4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	2201      	movs	r2, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	401a      	ands	r2, r3
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d123      	bne.n	8001c44 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001c1e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3248      	adds	r2, #72	@ 0x48
 8001c24:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c38:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c3a:	6979      	ldr	r1, [r7, #20]
 8001c3c:	3348      	adds	r3, #72	@ 0x48
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	440b      	add	r3, r1
 8001c42:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d122      	bne.n	8001c92 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001c6c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3248      	adds	r2, #72	@ 0x48
 8001c72:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001c86:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001c88:	6979      	ldr	r1, [r7, #20]
 8001c8a:	3348      	adds	r3, #72	@ 0x48
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	440b      	add	r3, r1
 8001c90:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	401a      	ands	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001cac:	e007      	b.n	8001cbe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001cd8:	e007      	b.n	8001cea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d107      	bne.n	8001d02 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001d08:	f023 0201 	bic.w	r2, r3, #1
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e006      	b.n	8001d24 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d1a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
  }
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40006400 	.word	0x40006400

08001d34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d12e      	bne.n	8001da6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 0201 	bic.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d60:	f7ff fddc 	bl	800191c <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d66:	e012      	b.n	8001d8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d68:	f7ff fdd8 	bl	800191c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b0a      	cmp	r3, #10
 8001d74:	d90b      	bls.n	8001d8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2205      	movs	r2, #5
 8001d86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e012      	b.n	8001db4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e5      	bne.n	8001d68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e006      	b.n	8001db4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001daa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
  }
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3710      	adds	r7, #16
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
 8001dc8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dda:	7ffb      	ldrb	r3, [r7, #31]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d003      	beq.n	8001de8 <HAL_CAN_AddTxMessage+0x2c>
 8001de0:	7ffb      	ldrb	r3, [r7, #31]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	f040 80ad 	bne.w	8001f42 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10a      	bne.n	8001e08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d105      	bne.n	8001e08 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8095 	beq.w	8001f32 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	0e1b      	lsrs	r3, r3, #24
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e12:	2201      	movs	r2, #1
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	409a      	lsls	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10d      	bne.n	8001e40 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e2e:	68f9      	ldr	r1, [r7, #12]
 8001e30:	6809      	ldr	r1, [r1, #0]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3318      	adds	r3, #24
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	440b      	add	r3, r1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e00f      	b.n	8001e60 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e4a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e50:	68f9      	ldr	r1, [r7, #12]
 8001e52:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e54:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3318      	adds	r3, #24
 8001e5a:	011b      	lsls	r3, r3, #4
 8001e5c:	440b      	add	r3, r1
 8001e5e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	6819      	ldr	r1, [r3, #0]
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3318      	adds	r3, #24
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	440b      	add	r3, r1
 8001e70:	3304      	adds	r3, #4
 8001e72:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	7d1b      	ldrb	r3, [r3, #20]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d111      	bne.n	8001ea0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3318      	adds	r3, #24
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	4413      	add	r3, r2
 8001e88:	3304      	adds	r3, #4
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	6811      	ldr	r1, [r2, #0]
 8001e90:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3318      	adds	r3, #24
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3304      	adds	r3, #4
 8001e9e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3307      	adds	r3, #7
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	061a      	lsls	r2, r3, #24
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3306      	adds	r3, #6
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	041b      	lsls	r3, r3, #16
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3305      	adds	r3, #5
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	3204      	adds	r2, #4
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	6811      	ldr	r1, [r2, #0]
 8001ec8:	ea43 0200 	orr.w	r2, r3, r0
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	440b      	add	r3, r1
 8001ed2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001ed6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3303      	adds	r3, #3
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	061a      	lsls	r2, r3, #24
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	041b      	lsls	r3, r3, #16
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3301      	adds	r3, #1
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	021b      	lsls	r3, r3, #8
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	7812      	ldrb	r2, [r2, #0]
 8001ef8:	4610      	mov	r0, r2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	6811      	ldr	r1, [r2, #0]
 8001efe:	ea43 0200 	orr.w	r2, r3, r0
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	440b      	add	r3, r1
 8001f08:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001f0c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	3318      	adds	r3, #24
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	4413      	add	r3, r2
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	6811      	ldr	r1, [r2, #0]
 8001f20:	f043 0201 	orr.w	r2, r3, #1
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	3318      	adds	r3, #24
 8001f28:	011b      	lsls	r3, r3, #4
 8001f2a:	440b      	add	r3, r1
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	e00e      	b.n	8001f50 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e006      	b.n	8001f50 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f46:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
  }
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3724      	adds	r7, #36	@ 0x24
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
 8001f68:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f70:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d003      	beq.n	8001f80 <HAL_CAN_GetRxMessage+0x24>
 8001f78:	7dfb      	ldrb	r3, [r7, #23]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	f040 8103 	bne.w	8002186 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10e      	bne.n	8001fa4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0303 	and.w	r3, r3, #3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d116      	bne.n	8001fc2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e0f7      	b.n	8002194 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d107      	bne.n	8001fc2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e0e8      	b.n	8002194 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	331b      	adds	r3, #27
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4413      	add	r3, r2
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0204 	and.w	r2, r3, #4
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10c      	bne.n	8001ffa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	331b      	adds	r3, #27
 8001fe8:	011b      	lsls	r3, r3, #4
 8001fea:	4413      	add	r3, r2
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0d5b      	lsrs	r3, r3, #21
 8001ff0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	e00b      	b.n	8002012 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	331b      	adds	r3, #27
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	08db      	lsrs	r3, r3, #3
 800200a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	331b      	adds	r3, #27
 800201a:	011b      	lsls	r3, r3, #4
 800201c:	4413      	add	r3, r2
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0202 	and.w	r2, r3, #2
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	331b      	adds	r3, #27
 8002030:	011b      	lsls	r3, r3, #4
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0308 	and.w	r3, r3, #8
 800203c:	2b00      	cmp	r3, #0
 800203e:	d003      	beq.n	8002048 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2208      	movs	r2, #8
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	e00b      	b.n	8002060 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	331b      	adds	r3, #27
 8002050:	011b      	lsls	r3, r3, #4
 8002052:	4413      	add	r3, r2
 8002054:	3304      	adds	r3, #4
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 020f 	and.w	r2, r3, #15
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	331b      	adds	r3, #27
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	4413      	add	r3, r2
 800206c:	3304      	adds	r3, #4
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	b2da      	uxtb	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	331b      	adds	r3, #27
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0c1b      	lsrs	r3, r3, #16
 800208a:	b29a      	uxth	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	011b      	lsls	r3, r3, #4
 8002098:	4413      	add	r3, r2
 800209a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	4413      	add	r3, r2
 80020b0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	0a1a      	lsrs	r2, r3, #8
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	3301      	adds	r3, #1
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	011b      	lsls	r3, r3, #4
 80020c8:	4413      	add	r3, r2
 80020ca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	0c1a      	lsrs	r2, r3, #16
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	3302      	adds	r3, #2
 80020d6:	b2d2      	uxtb	r2, r2
 80020d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	4413      	add	r3, r2
 80020e4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	0e1a      	lsrs	r2, r3, #24
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	3303      	adds	r3, #3
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	3304      	adds	r3, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	4413      	add	r3, r2
 8002116:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0a1a      	lsrs	r2, r3, #8
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	3305      	adds	r3, #5
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0c1a      	lsrs	r2, r3, #16
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	3306      	adds	r3, #6
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	4413      	add	r3, r2
 800214a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	0e1a      	lsrs	r2, r3, #24
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	3307      	adds	r3, #7
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d108      	bne.n	8002172 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0220 	orr.w	r2, r2, #32
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	e007      	b.n	8002182 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f042 0220 	orr.w	r2, r2, #32
 8002180:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e006      	b.n	8002194 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
  }
}
 8002194:	4618      	mov	r0, r3
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d002      	beq.n	80021be <HAL_CAN_ActivateNotification+0x1e>
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d109      	bne.n	80021d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	e006      	b.n	80021e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	@ 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002228:	6a3b      	ldr	r3, [r7, #32]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d07c      	beq.n	800232c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f983 	bl	800255a <HAL_CAN_TxMailbox0CompleteCallback>
 8002254:	e016      	b.n	8002284 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d004      	beq.n	800226a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002262:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
 8002268:	e00c      	b.n	8002284 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	2b00      	cmp	r3, #0
 8002272:	d004      	beq.n	800227e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
 800227c:	e002      	b.n	8002284 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f989 	bl	8002596 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d024      	beq.n	80022d8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002296:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f963 	bl	800256e <HAL_CAN_TxMailbox1CompleteCallback>
 80022a8:	e016      	b.n	80022d8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d004      	beq.n	80022be <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80022b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80022bc:	e00c      	b.n	80022d8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d004      	beq.n	80022d2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80022c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80022d0:	e002      	b.n	80022d8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f969 	bl	80025aa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d024      	beq.n	800232c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f943 	bl	8002582 <HAL_CAN_TxMailbox2CompleteCallback>
 80022fc:	e016      	b.n	800232c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d004      	beq.n	8002312 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002310:	e00c      	b.n	800232c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d004      	beq.n	8002326 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
 8002324:	e002      	b.n	800232c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f949 	bl	80025be <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800232c:	6a3b      	ldr	r3, [r7, #32]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00c      	beq.n	8002350 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0310 	and.w	r3, r3, #16
 800233c:	2b00      	cmp	r3, #0
 800233e:	d007      	beq.n	8002350 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002346:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2210      	movs	r2, #16
 800234e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00b      	beq.n	8002372 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	f003 0308 	and.w	r3, r3, #8
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2208      	movs	r2, #8
 800236a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f930 	bl	80025d2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d002      	beq.n	8002390 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe ffa2 	bl	80012d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00c      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2210      	movs	r2, #16
 80023b2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2208      	movs	r2, #8
 80023ce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f912 	bl	80025fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d002      	beq.n	80023f4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 f8f9 	bl	80025e6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00b      	beq.n	8002416 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d006      	beq.n	8002416 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2210      	movs	r2, #16
 800240e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f8fc 	bl	800260e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00b      	beq.n	8002438 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2208      	movs	r2, #8
 8002430:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 f8f5 	bl	8002622 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d07b      	beq.n	800253a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d072      	beq.n	8002532 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d003      	beq.n	8002484 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800247c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002484:	6a3b      	ldr	r3, [r7, #32]
 8002486:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800248a:	2b00      	cmp	r3, #0
 800248c:	d008      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	f043 0304 	orr.w	r3, r3, #4
 800249e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d043      	beq.n	8002532 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03e      	beq.n	8002532 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ba:	2b60      	cmp	r3, #96	@ 0x60
 80024bc:	d02b      	beq.n	8002516 <HAL_CAN_IRQHandler+0x32a>
 80024be:	2b60      	cmp	r3, #96	@ 0x60
 80024c0:	d82e      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024c2:	2b50      	cmp	r3, #80	@ 0x50
 80024c4:	d022      	beq.n	800250c <HAL_CAN_IRQHandler+0x320>
 80024c6:	2b50      	cmp	r3, #80	@ 0x50
 80024c8:	d82a      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024ca:	2b40      	cmp	r3, #64	@ 0x40
 80024cc:	d019      	beq.n	8002502 <HAL_CAN_IRQHandler+0x316>
 80024ce:	2b40      	cmp	r3, #64	@ 0x40
 80024d0:	d826      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024d2:	2b30      	cmp	r3, #48	@ 0x30
 80024d4:	d010      	beq.n	80024f8 <HAL_CAN_IRQHandler+0x30c>
 80024d6:	2b30      	cmp	r3, #48	@ 0x30
 80024d8:	d822      	bhi.n	8002520 <HAL_CAN_IRQHandler+0x334>
 80024da:	2b10      	cmp	r3, #16
 80024dc:	d002      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x2f8>
 80024de:	2b20      	cmp	r3, #32
 80024e0:	d005      	beq.n	80024ee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80024e2:	e01d      	b.n	8002520 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	f043 0308 	orr.w	r3, r3, #8
 80024ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024ec:	e019      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	f043 0310 	orr.w	r3, r3, #16
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80024f6:	e014      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80024f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fa:	f043 0320 	orr.w	r3, r3, #32
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002500:	e00f      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800250a:	e00a      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002514:	e005      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800251c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800251e:	e000      	b.n	8002522 <HAL_CAN_IRQHandler+0x336>
            break;
 8002520:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002530:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2204      	movs	r2, #4
 8002538:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	431a      	orrs	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f872 	bl	8002636 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002552:	bf00      	nop
 8002554:	3728      	adds	r7, #40	@ 0x28
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002562:	bf00      	nop
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002576:	bf00      	nop
 8002578:	370c      	adds	r7, #12
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr

08002636 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800265c:	4b0c      	ldr	r3, [pc, #48]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002668:	4013      	ands	r3, r2
 800266a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800267c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267e:	4a04      	ldr	r2, [pc, #16]	@ (8002690 <__NVIC_SetPriorityGrouping+0x44>)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	60d3      	str	r3, [r2, #12]
}
 8002684:	bf00      	nop
 8002686:	3714      	adds	r7, #20
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002698:	4b04      	ldr	r3, [pc, #16]	@ (80026ac <__NVIC_GetPriorityGrouping+0x18>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	0a1b      	lsrs	r3, r3, #8
 800269e:	f003 0307 	and.w	r3, r3, #7
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	e000ed00 	.word	0xe000ed00

080026b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	db0b      	blt.n	80026da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026c2:	79fb      	ldrb	r3, [r7, #7]
 80026c4:	f003 021f 	and.w	r2, r3, #31
 80026c8:	4907      	ldr	r1, [pc, #28]	@ (80026e8 <__NVIC_EnableIRQ+0x38>)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	095b      	lsrs	r3, r3, #5
 80026d0:	2001      	movs	r0, #1
 80026d2:	fa00 f202 	lsl.w	r2, r0, r2
 80026d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026da:	bf00      	nop
 80026dc:	370c      	adds	r7, #12
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	e000e100 	.word	0xe000e100

080026ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	6039      	str	r1, [r7, #0]
 80026f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db0a      	blt.n	8002716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	b2da      	uxtb	r2, r3
 8002704:	490c      	ldr	r1, [pc, #48]	@ (8002738 <__NVIC_SetPriority+0x4c>)
 8002706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270a:	0112      	lsls	r2, r2, #4
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	440b      	add	r3, r1
 8002710:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002714:	e00a      	b.n	800272c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	b2da      	uxtb	r2, r3
 800271a:	4908      	ldr	r1, [pc, #32]	@ (800273c <__NVIC_SetPriority+0x50>)
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	3b04      	subs	r3, #4
 8002724:	0112      	lsls	r2, r2, #4
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	440b      	add	r3, r1
 800272a:	761a      	strb	r2, [r3, #24]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	e000e100 	.word	0xe000e100
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	@ 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f1c3 0307 	rsb	r3, r3, #7
 800275a:	2b04      	cmp	r3, #4
 800275c:	bf28      	it	cs
 800275e:	2304      	movcs	r3, #4
 8002760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3304      	adds	r3, #4
 8002766:	2b06      	cmp	r3, #6
 8002768:	d902      	bls.n	8002770 <NVIC_EncodePriority+0x30>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	3b03      	subs	r3, #3
 800276e:	e000      	b.n	8002772 <NVIC_EncodePriority+0x32>
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002774:	f04f 32ff 	mov.w	r2, #4294967295
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	401a      	ands	r2, r3
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	fa01 f303 	lsl.w	r3, r1, r3
 8002792:	43d9      	mvns	r1, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002798:	4313      	orrs	r3, r2
         );
}
 800279a:	4618      	mov	r0, r3
 800279c:	3724      	adds	r7, #36	@ 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027b8:	d301      	bcc.n	80027be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ba:	2301      	movs	r3, #1
 80027bc:	e00f      	b.n	80027de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027be:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <SysTick_Config+0x40>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027c6:	210f      	movs	r1, #15
 80027c8:	f04f 30ff 	mov.w	r0, #4294967295
 80027cc:	f7ff ff8e 	bl	80026ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027d0:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <SysTick_Config+0x40>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d6:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <SysTick_Config+0x40>)
 80027d8:	2207      	movs	r2, #7
 80027da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	e000e010 	.word	0xe000e010

080027ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff29 	bl	800264c <__NVIC_SetPriorityGrouping>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}

08002802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002802:	b580      	push	{r7, lr}
 8002804:	b086      	sub	sp, #24
 8002806:	af00      	add	r7, sp, #0
 8002808:	4603      	mov	r3, r0
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002810:	2300      	movs	r3, #0
 8002812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002814:	f7ff ff3e 	bl	8002694 <__NVIC_GetPriorityGrouping>
 8002818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff8e 	bl	8002740 <NVIC_EncodePriority>
 8002824:	4602      	mov	r2, r0
 8002826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff5d 	bl	80026ec <__NVIC_SetPriority>
}
 8002832:	bf00      	nop
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	4603      	mov	r3, r0
 8002842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff ff31 	bl	80026b0 <__NVIC_EnableIRQ>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f7ff ffa2 	bl	80027a8 <SysTick_Config>
 8002864:	4603      	mov	r3, r0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3708      	adds	r7, #8
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff f84e 	bl	800191c <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d008      	beq.n	80028a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2280      	movs	r2, #128	@ 0x80
 8002892:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e052      	b.n	8002946 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0216 	bic.w	r2, r2, #22
 80028ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695a      	ldr	r2, [r3, #20]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d103      	bne.n	80028d0 <HAL_DMA_Abort+0x62>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0208 	bic.w	r2, r2, #8
 80028de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f022 0201 	bic.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028f0:	e013      	b.n	800291a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028f2:	f7ff f813 	bl	800191c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d90c      	bls.n	800291a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2220      	movs	r2, #32
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2203      	movs	r2, #3
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e015      	b.n	8002946 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	2b00      	cmp	r3, #0
 8002926:	d1e4      	bne.n	80028f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800292c:	223f      	movs	r2, #63	@ 0x3f
 800292e:	409a      	lsls	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d004      	beq.n	800296c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2280      	movs	r2, #128	@ 0x80
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e00c      	b.n	8002986 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2205      	movs	r2, #5
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f022 0201 	bic.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b089      	sub	sp, #36	@ 0x24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e16b      	b.n	8002c88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b0:	2201      	movs	r2, #1
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029c4:	693a      	ldr	r2, [r7, #16]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	f040 815a 	bne.w	8002c82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d005      	beq.n	80029e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d130      	bne.n	8002a48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	2203      	movs	r2, #3
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 0201 	and.w	r2, r3, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 0303 	and.w	r3, r3, #3
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d017      	beq.n	8002a84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	2203      	movs	r2, #3
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d123      	bne.n	8002ad8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	220f      	movs	r2, #15
 8002aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	08da      	lsrs	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3208      	adds	r2, #8
 8002ad2:	69b9      	ldr	r1, [r7, #24]
 8002ad4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80b4 	beq.w	8002c82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b60      	ldr	r3, [pc, #384]	@ (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4a5f      	ldr	r2, [pc, #380]	@ (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ca0 <HAL_GPIO_Init+0x30c>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ca4 <HAL_GPIO_Init+0x310>)
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	089b      	lsrs	r3, r3, #2
 8002b3c:	3302      	adds	r3, #2
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	220f      	movs	r2, #15
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4013      	ands	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a52      	ldr	r2, [pc, #328]	@ (8002ca8 <HAL_GPIO_Init+0x314>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02b      	beq.n	8002bba <HAL_GPIO_Init+0x226>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a51      	ldr	r2, [pc, #324]	@ (8002cac <HAL_GPIO_Init+0x318>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x222>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a50      	ldr	r2, [pc, #320]	@ (8002cb0 <HAL_GPIO_Init+0x31c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x21e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	@ (8002cb4 <HAL_GPIO_Init+0x320>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x21a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8002cb8 <HAL_GPIO_Init+0x324>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x216>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	@ (8002cbc <HAL_GPIO_Init+0x328>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x212>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cc0 <HAL_GPIO_Init+0x32c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x20e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	@ (8002cc4 <HAL_GPIO_Init+0x330>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x20a>
 8002b9a:	2307      	movs	r3, #7
 8002b9c:	e00e      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	e00c      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e00a      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002ba6:	2305      	movs	r3, #5
 8002ba8:	e008      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002baa:	2304      	movs	r3, #4
 8002bac:	e006      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e004      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	e002      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_GPIO_Init+0x228>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	69fa      	ldr	r2, [r7, #28]
 8002bbe:	f002 0203 	and.w	r2, r2, #3
 8002bc2:	0092      	lsls	r2, r2, #2
 8002bc4:	4093      	lsls	r3, r2
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bcc:	4935      	ldr	r1, [pc, #212]	@ (8002ca4 <HAL_GPIO_Init+0x310>)
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	089b      	lsrs	r3, r3, #2
 8002bd2:	3302      	adds	r3, #2
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bda:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfe:	4a32      	ldr	r2, [pc, #200]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c04:	4b30      	ldr	r3, [pc, #192]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4013      	ands	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d003      	beq.n	8002c28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c28:	4a27      	ldr	r2, [pc, #156]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c52:	4a1d      	ldr	r2, [pc, #116]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c74:	69ba      	ldr	r2, [r7, #24]
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c7c:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <HAL_GPIO_Init+0x334>)
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3301      	adds	r3, #1
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b0f      	cmp	r3, #15
 8002c8c:	f67f ae90 	bls.w	80029b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c90:	bf00      	nop
 8002c92:	bf00      	nop
 8002c94:	3724      	adds	r7, #36	@ 0x24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40020000 	.word	0x40020000
 8002cac:	40020400 	.word	0x40020400
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	40020c00 	.word	0x40020c00
 8002cb8:	40021000 	.word	0x40021000
 8002cbc:	40021400 	.word	0x40021400
 8002cc0:	40021800 	.word	0x40021800
 8002cc4:	40021c00 	.word	0x40021c00
 8002cc8:	40013c00 	.word	0x40013c00

08002ccc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	807b      	strh	r3, [r7, #2]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cdc:	787b      	ldrb	r3, [r7, #1]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ce2:	887a      	ldrh	r2, [r7, #2]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce8:	e003      	b.n	8002cf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cea:	887b      	ldrh	r3, [r7, #2]
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	619a      	str	r2, [r3, #24]
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b085      	sub	sp, #20
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	460b      	mov	r3, r1
 8002d08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d10:	887a      	ldrh	r2, [r7, #2]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4013      	ands	r3, r2
 8002d16:	041a      	lsls	r2, r3, #16
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43d9      	mvns	r1, r3
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	400b      	ands	r3, r1
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	619a      	str	r2, [r3, #24]
}
 8002d26:	bf00      	nop
 8002d28:	3714      	adds	r7, #20
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
	...

08002d34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e267      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d075      	beq.n	8002e3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d52:	4b88      	ldr	r3, [pc, #544]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 030c 	and.w	r3, r3, #12
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d00c      	beq.n	8002d78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d5e:	4b85      	ldr	r3, [pc, #532]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d112      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d6a:	4b82      	ldr	r3, [pc, #520]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d76:	d10b      	bne.n	8002d90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d78:	4b7e      	ldr	r3, [pc, #504]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d05b      	beq.n	8002e3c <HAL_RCC_OscConfig+0x108>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d157      	bne.n	8002e3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e242      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d98:	d106      	bne.n	8002da8 <HAL_RCC_OscConfig+0x74>
 8002d9a:	4b76      	ldr	r3, [pc, #472]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a75      	ldr	r2, [pc, #468]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002da0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	e01d      	b.n	8002de4 <HAL_RCC_OscConfig+0xb0>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x98>
 8002db2:	4b70      	ldr	r3, [pc, #448]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a6f      	ldr	r2, [pc, #444]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002db8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dbc:	6013      	str	r3, [r2, #0]
 8002dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a6c      	ldr	r2, [pc, #432]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	e00b      	b.n	8002de4 <HAL_RCC_OscConfig+0xb0>
 8002dcc:	4b69      	ldr	r3, [pc, #420]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a68      	ldr	r2, [pc, #416]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b66      	ldr	r3, [pc, #408]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a65      	ldr	r2, [pc, #404]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002dde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d013      	beq.n	8002e14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe fd96 	bl	800191c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002df4:	f7fe fd92 	bl	800191c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b64      	cmp	r3, #100	@ 0x64
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e207      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b5b      	ldr	r3, [pc, #364]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0xc0>
 8002e12:	e014      	b.n	8002e3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fd82 	bl	800191c <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fd7e 	bl	800191c <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	@ 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e1f3      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e2e:	4b51      	ldr	r3, [pc, #324]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0xe8>
 8002e3a:	e000      	b.n	8002e3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d063      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e56:	4b47      	ldr	r3, [pc, #284]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e5e:	2b08      	cmp	r3, #8
 8002e60:	d11c      	bne.n	8002e9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e62:	4b44      	ldr	r3, [pc, #272]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d116      	bne.n	8002e9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6e:	4b41      	ldr	r3, [pc, #260]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x152>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d001      	beq.n	8002e86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e1c7      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e86:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4937      	ldr	r1, [pc, #220]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	e03a      	b.n	8002f12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ea4:	4b34      	ldr	r3, [pc, #208]	@ (8002f78 <HAL_RCC_OscConfig+0x244>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fd37 	bl	800191c <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb2:	f7fe fd33 	bl	800191c <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e1a8      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed0:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4925      	ldr	r1, [pc, #148]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	e015      	b.n	8002f12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ee6:	4b24      	ldr	r3, [pc, #144]	@ (8002f78 <HAL_RCC_OscConfig+0x244>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eec:	f7fe fd16 	bl	800191c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ef4:	f7fe fd12 	bl	800191c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e187      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f06:	4b1b      	ldr	r3, [pc, #108]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d036      	beq.n	8002f8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d016      	beq.n	8002f54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f26:	4b15      	ldr	r3, [pc, #84]	@ (8002f7c <HAL_RCC_OscConfig+0x248>)
 8002f28:	2201      	movs	r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2c:	f7fe fcf6 	bl	800191c <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f32:	e008      	b.n	8002f46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f34:	f7fe fcf2 	bl	800191c <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e167      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f46:	4b0b      	ldr	r3, [pc, #44]	@ (8002f74 <HAL_RCC_OscConfig+0x240>)
 8002f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0f0      	beq.n	8002f34 <HAL_RCC_OscConfig+0x200>
 8002f52:	e01b      	b.n	8002f8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f54:	4b09      	ldr	r3, [pc, #36]	@ (8002f7c <HAL_RCC_OscConfig+0x248>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fcdf 	bl	800191c <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	e00e      	b.n	8002f80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f62:	f7fe fcdb 	bl	800191c <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d907      	bls.n	8002f80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e150      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	42470000 	.word	0x42470000
 8002f7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f80:	4b88      	ldr	r3, [pc, #544]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002f82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ea      	bne.n	8002f62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8097 	beq.w	80030c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9e:	4b81      	ldr	r3, [pc, #516]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10f      	bne.n	8002fca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	4b7d      	ldr	r3, [pc, #500]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fba:	4b7a      	ldr	r3, [pc, #488]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fca:	4b77      	ldr	r3, [pc, #476]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d118      	bne.n	8003008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd6:	4b74      	ldr	r3, [pc, #464]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a73      	ldr	r2, [pc, #460]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe fc9b 	bl	800191c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe8:	e008      	b.n	8002ffc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fea:	f7fe fc97 	bl	800191c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e10c      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffc:	4b6a      	ldr	r3, [pc, #424]	@ (80031a8 <HAL_RCC_OscConfig+0x474>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0f0      	beq.n	8002fea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x2ea>
 8003010:	4b64      	ldr	r3, [pc, #400]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003014:	4a63      	ldr	r2, [pc, #396]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6713      	str	r3, [r2, #112]	@ 0x70
 800301c:	e01c      	b.n	8003058 <HAL_RCC_OscConfig+0x324>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b05      	cmp	r3, #5
 8003024:	d10c      	bne.n	8003040 <HAL_RCC_OscConfig+0x30c>
 8003026:	4b5f      	ldr	r3, [pc, #380]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302a:	4a5e      	ldr	r2, [pc, #376]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800302c:	f043 0304 	orr.w	r3, r3, #4
 8003030:	6713      	str	r3, [r2, #112]	@ 0x70
 8003032:	4b5c      	ldr	r3, [pc, #368]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003036:	4a5b      	ldr	r2, [pc, #364]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	6713      	str	r3, [r2, #112]	@ 0x70
 800303e:	e00b      	b.n	8003058 <HAL_RCC_OscConfig+0x324>
 8003040:	4b58      	ldr	r3, [pc, #352]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003044:	4a57      	ldr	r2, [pc, #348]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003046:	f023 0301 	bic.w	r3, r3, #1
 800304a:	6713      	str	r3, [r2, #112]	@ 0x70
 800304c:	4b55      	ldr	r3, [pc, #340]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800304e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003050:	4a54      	ldr	r2, [pc, #336]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003052:	f023 0304 	bic.w	r3, r3, #4
 8003056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003060:	f7fe fc5c 	bl	800191c <HAL_GetTick>
 8003064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003066:	e00a      	b.n	800307e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003068:	f7fe fc58 	bl	800191c <HAL_GetTick>
 800306c:	4602      	mov	r2, r0
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003076:	4293      	cmp	r3, r2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e0cb      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0ee      	beq.n	8003068 <HAL_RCC_OscConfig+0x334>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fe fc46 	bl	800191c <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7fe fc42 	bl	800191c <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0b5      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030aa:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1ee      	bne.n	8003094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030b6:	7dfb      	ldrb	r3, [r7, #23]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d105      	bne.n	80030c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030bc:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	4a38      	ldr	r2, [pc, #224]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a1 	beq.w	8003214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030d2:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d05c      	beq.n	8003198 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d141      	bne.n	800316a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e6:	4b31      	ldr	r3, [pc, #196]	@ (80031ac <HAL_RCC_OscConfig+0x478>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ec:	f7fe fc16 	bl	800191c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fc12 	bl	800191c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e087      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b27      	ldr	r3, [pc, #156]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	019b      	lsls	r3, r3, #6
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	491b      	ldr	r1, [pc, #108]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 8003138:	4313      	orrs	r3, r2
 800313a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800313c:	4b1b      	ldr	r3, [pc, #108]	@ (80031ac <HAL_RCC_OscConfig+0x478>)
 800313e:	2201      	movs	r2, #1
 8003140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003142:	f7fe fbeb 	bl	800191c <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800314a:	f7fe fbe7 	bl	800191c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e05c      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x416>
 8003168:	e054      	b.n	8003214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b10      	ldr	r3, [pc, #64]	@ (80031ac <HAL_RCC_OscConfig+0x478>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fbd4 	bl	800191c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fbd0 	bl	800191c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e045      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <HAL_RCC_OscConfig+0x470>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x444>
 8003196:	e03d      	b.n	8003214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e038      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	40007000 	.word	0x40007000
 80031ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003220 <HAL_RCC_OscConfig+0x4ec>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d028      	beq.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d121      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d11a      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d111      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f6:	085b      	lsrs	r3, r3, #1
 80031f8:	3b01      	subs	r3, #1
 80031fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d107      	bne.n	8003210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800320a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800320c:	429a      	cmp	r2, r3
 800320e:	d001      	beq.n	8003214 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3718      	adds	r7, #24
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0cc      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003238:	4b68      	ldr	r3, [pc, #416]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d90c      	bls.n	8003260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003246:	4b65      	ldr	r3, [pc, #404]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800324e:	4b63      	ldr	r3, [pc, #396]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	d001      	beq.n	8003260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0b8      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d020      	beq.n	80032ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003278:	4b59      	ldr	r3, [pc, #356]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	4a58      	ldr	r2, [pc, #352]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003282:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d005      	beq.n	800329c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003290:	4b53      	ldr	r3, [pc, #332]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	4a52      	ldr	r2, [pc, #328]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800329a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800329c:	4b50      	ldr	r3, [pc, #320]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	494d      	ldr	r1, [pc, #308]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d044      	beq.n	8003344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d107      	bne.n	80032d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d119      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e07f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d003      	beq.n	80032e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032de:	2b03      	cmp	r3, #3
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e2:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e06f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f2:	4b3b      	ldr	r3, [pc, #236]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e067      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003302:	4b37      	ldr	r3, [pc, #220]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f023 0203 	bic.w	r2, r3, #3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	4934      	ldr	r1, [pc, #208]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	4313      	orrs	r3, r2
 8003312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003314:	f7fe fb02 	bl	800191c <HAL_GetTick>
 8003318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800331a:	e00a      	b.n	8003332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800331c:	f7fe fafe 	bl	800191c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800332a:	4293      	cmp	r3, r2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e04f      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 020c 	and.w	r2, r3, #12
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	429a      	cmp	r2, r3
 8003342:	d1eb      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003344:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d20c      	bcs.n	800336c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b22      	ldr	r3, [pc, #136]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0307 	and.w	r3, r3, #7
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e032      	b.n	80033d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d008      	beq.n	800338a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4916      	ldr	r1, [pc, #88]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	4313      	orrs	r3, r2
 8003388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0308 	and.w	r3, r3, #8
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	490e      	ldr	r1, [pc, #56]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033aa:	f000 f821 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033ae:	4602      	mov	r2, r0
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	490a      	ldr	r1, [pc, #40]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c0>)
 80033bc:	5ccb      	ldrb	r3, [r1, r3]
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a09      	ldr	r2, [pc, #36]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCC_ClockConfig+0x1c8>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fe fa62 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023c00 	.word	0x40023c00
 80033e0:	40023800 	.word	0x40023800
 80033e4:	08004700 	.word	0x08004700
 80033e8:	20000004 	.word	0x20000004
 80033ec:	20000008 	.word	0x20000008

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033f4:	b090      	sub	sp, #64	@ 0x40
 80033f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f8:	2300      	movs	r3, #0
 80033fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80033fc:	2300      	movs	r3, #0
 80033fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003400:	2300      	movs	r3, #0
 8003402:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003404:	2300      	movs	r3, #0
 8003406:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003408:	4b59      	ldr	r3, [pc, #356]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d00d      	beq.n	8003430 <HAL_RCC_GetSysClockFreq+0x40>
 8003414:	2b08      	cmp	r3, #8
 8003416:	f200 80a1 	bhi.w	800355c <HAL_RCC_GetSysClockFreq+0x16c>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 800341e:	2b04      	cmp	r3, #4
 8003420:	d003      	beq.n	800342a <HAL_RCC_GetSysClockFreq+0x3a>
 8003422:	e09b      	b.n	800355c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x184>)
 8003426:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003428:	e09b      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800342a:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x188>)
 800342c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800342e:	e098      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003430:	4b4f      	ldr	r3, [pc, #316]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800343a:	4b4d      	ldr	r3, [pc, #308]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d028      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003446:	4b4a      	ldr	r3, [pc, #296]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	099b      	lsrs	r3, r3, #6
 800344c:	2200      	movs	r2, #0
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	627a      	str	r2, [r7, #36]	@ 0x24
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003458:	2100      	movs	r1, #0
 800345a:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x188>)
 800345c:	fb03 f201 	mul.w	r2, r3, r1
 8003460:	2300      	movs	r3, #0
 8003462:	fb00 f303 	mul.w	r3, r0, r3
 8003466:	4413      	add	r3, r2
 8003468:	4a43      	ldr	r2, [pc, #268]	@ (8003578 <HAL_RCC_GetSysClockFreq+0x188>)
 800346a:	fba0 1202 	umull	r1, r2, r0, r2
 800346e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003470:	460a      	mov	r2, r1
 8003472:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003474:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003476:	4413      	add	r3, r2
 8003478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800347a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347c:	2200      	movs	r2, #0
 800347e:	61bb      	str	r3, [r7, #24]
 8003480:	61fa      	str	r2, [r7, #28]
 8003482:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003486:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800348a:	f7fd fabb 	bl	8000a04 <__aeabi_uldivmod>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4613      	mov	r3, r2
 8003494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003496:	e053      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003498:	4b35      	ldr	r3, [pc, #212]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	099b      	lsrs	r3, r3, #6
 800349e:	2200      	movs	r2, #0
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	617a      	str	r2, [r7, #20]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034aa:	f04f 0b00 	mov.w	fp, #0
 80034ae:	4652      	mov	r2, sl
 80034b0:	465b      	mov	r3, fp
 80034b2:	f04f 0000 	mov.w	r0, #0
 80034b6:	f04f 0100 	mov.w	r1, #0
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034c0:	0150      	lsls	r0, r2, #5
 80034c2:	4602      	mov	r2, r0
 80034c4:	460b      	mov	r3, r1
 80034c6:	ebb2 080a 	subs.w	r8, r2, sl
 80034ca:	eb63 090b 	sbc.w	r9, r3, fp
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80034da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80034de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80034e2:	ebb2 0408 	subs.w	r4, r2, r8
 80034e6:	eb63 0509 	sbc.w	r5, r3, r9
 80034ea:	f04f 0200 	mov.w	r2, #0
 80034ee:	f04f 0300 	mov.w	r3, #0
 80034f2:	00eb      	lsls	r3, r5, #3
 80034f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034f8:	00e2      	lsls	r2, r4, #3
 80034fa:	4614      	mov	r4, r2
 80034fc:	461d      	mov	r5, r3
 80034fe:	eb14 030a 	adds.w	r3, r4, sl
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	eb45 030b 	adc.w	r3, r5, fp
 8003508:	607b      	str	r3, [r7, #4]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003516:	4629      	mov	r1, r5
 8003518:	028b      	lsls	r3, r1, #10
 800351a:	4621      	mov	r1, r4
 800351c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003520:	4621      	mov	r1, r4
 8003522:	028a      	lsls	r2, r1, #10
 8003524:	4610      	mov	r0, r2
 8003526:	4619      	mov	r1, r3
 8003528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800352a:	2200      	movs	r2, #0
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	60fa      	str	r2, [r7, #12]
 8003530:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003534:	f7fd fa66 	bl	8000a04 <__aeabi_uldivmod>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4613      	mov	r3, r2
 800353e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003540:	4b0b      	ldr	r3, [pc, #44]	@ (8003570 <HAL_RCC_GetSysClockFreq+0x180>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	3301      	adds	r3, #1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003550:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003554:	fbb2 f3f3 	udiv	r3, r2, r3
 8003558:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800355a:	e002      	b.n	8003562 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_RCC_GetSysClockFreq+0x184>)
 800355e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003564:	4618      	mov	r0, r3
 8003566:	3740      	adds	r7, #64	@ 0x40
 8003568:	46bd      	mov	sp, r7
 800356a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	00f42400 	.word	0x00f42400
 8003578:	017d7840 	.word	0x017d7840

0800357c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003580:	4b03      	ldr	r3, [pc, #12]	@ (8003590 <HAL_RCC_GetHCLKFreq+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000004 	.word	0x20000004

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff0 	bl	800357c <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	@ (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0a9b      	lsrs	r3, r3, #10
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	@ (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	08004710 	.word	0x08004710

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffdc 	bl	800357c <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	@ (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	0b5b      	lsrs	r3, r3, #13
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	@ (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40023800 	.word	0x40023800
 80035e0:	08004710 	.word	0x08004710

080035e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e042      	b.n	800367c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d106      	bne.n	8003610 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe f886 	bl	800171c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2224      	movs	r2, #36	@ 0x24
 8003614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003626:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 fdbd 	bl	80041a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	691a      	ldr	r2, [r3, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800363c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695a      	ldr	r2, [r3, #20]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800364c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68da      	ldr	r2, [r3, #12]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800365c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08a      	sub	sp, #40	@ 0x28
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d175      	bne.n	8003790 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_UART_Transmit+0x2c>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e06e      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2221      	movs	r2, #33	@ 0x21
 80036be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036c2:	f7fe f92b 	bl	800191c <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	88fa      	ldrh	r2, [r7, #6]
 80036cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	88fa      	ldrh	r2, [r7, #6]
 80036d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036dc:	d108      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d104      	bne.n	80036f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	61bb      	str	r3, [r7, #24]
 80036ee:	e003      	b.n	80036f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036f4:	2300      	movs	r3, #0
 80036f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036f8:	e02e      	b.n	8003758 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fb1f 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e03a      	b.n	8003792 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10b      	bne.n	800373a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	881b      	ldrh	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003730:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	3302      	adds	r3, #2
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	e007      	b.n	800374a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	781a      	ldrb	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1cb      	bne.n	80036fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	2140      	movs	r1, #64	@ 0x40
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 faeb 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e006      	b.n	8003792 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	e000      	b.n	8003792 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003790:	2302      	movs	r3, #2
  }
}
 8003792:	4618      	mov	r0, r3
 8003794:	3720      	adds	r7, #32
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	4613      	mov	r3, r2
 80037a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d112      	bne.n	80037da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Receive_IT+0x26>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e00b      	b.n	80037dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80037ca:	88fb      	ldrh	r3, [r7, #6]
 80037cc:	461a      	mov	r2, r3
 80037ce:	68b9      	ldr	r1, [r7, #8]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 fb12 	bl	8003dfa <UART_Start_Receive_IT>
 80037d6:	4603      	mov	r3, r0
 80037d8:	e000      	b.n	80037dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80037da:	2302      	movs	r3, #2
  }
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b0ba      	sub	sp, #232	@ 0xe8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10f      	bne.n	800384a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800382a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_UART_IRQHandler+0x66>
 8003836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fbf2 	bl	800402c <UART_Receive_IT>
      return;
 8003848:	e25b      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800384a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 80de 	beq.w	8003a10 <HAL_UART_IRQHandler+0x22c>
 8003854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003864:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003868:	2b00      	cmp	r3, #0
 800386a:	f000 80d1 	beq.w	8003a10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800386e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <HAL_UART_IRQHandler+0xae>
 800387a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800387e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0201 	orr.w	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003896:	f003 0304 	and.w	r3, r3, #4
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00b      	beq.n	80038b6 <HAL_UART_IRQHandler+0xd2>
 800389e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d005      	beq.n	80038b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f043 0202 	orr.w	r2, r3, #2
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00b      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
 80038c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d005      	beq.n	80038da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	f043 0204 	orr.w	r2, r3, #4
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d011      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
 80038e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d105      	bne.n	80038fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003902:	f043 0208 	orr.w	r2, r3, #8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 81f2 	beq.w	8003cf8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_UART_IRQHandler+0x14e>
 8003920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fb7d 	bl	800402c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393c:	2b40      	cmp	r3, #64	@ 0x40
 800393e:	bf0c      	ite	eq
 8003940:	2301      	moveq	r3, #1
 8003942:	2300      	movne	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d103      	bne.n	800395e <HAL_UART_IRQHandler+0x17a>
 8003956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800395a:	2b00      	cmp	r3, #0
 800395c:	d04f      	beq.n	80039fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fa85 	bl	8003e6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b40      	cmp	r3, #64	@ 0x40
 8003970:	d141      	bne.n	80039f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003988:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800398c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003990:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	3314      	adds	r3, #20
 800399a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800399e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80039a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80039aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80039b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1d9      	bne.n	8003972 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d013      	beq.n	80039ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ca:	4a7e      	ldr	r2, [pc, #504]	@ (8003bc4 <HAL_UART_IRQHandler+0x3e0>)
 80039cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fe ffbb 	bl	800294e <HAL_DMA_Abort_IT>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d016      	beq.n	8003a0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039e8:	4610      	mov	r0, r2
 80039ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e00e      	b.n	8003a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f994 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f4:	e00a      	b.n	8003a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f990 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	e006      	b.n	8003a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f98c 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a0a:	e175      	b.n	8003cf8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a0c:	bf00      	nop
    return;
 8003a0e:	e173      	b.n	8003cf8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	f040 814f 	bne.w	8003cb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a1e:	f003 0310 	and.w	r3, r3, #16
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 8148 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8141 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	60bb      	str	r3, [r7, #8]
 8003a4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a56:	2b40      	cmp	r3, #64	@ 0x40
 8003a58:	f040 80b6 	bne.w	8003bc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 8145 	beq.w	8003cfc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	f080 813e 	bcs.w	8003cfc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a92:	f000 8088 	beq.w	8003ba6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003ac2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ac6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1d9      	bne.n	8003a96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003af2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003b18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e1      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3314      	adds	r3, #20
 8003b24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003b2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003b30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3314      	adds	r3, #20
 8003b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003b42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003b48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003b50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	330c      	adds	r3, #12
 8003b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b6e:	e853 3f00 	ldrex	r3, [r3]
 8003b72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b76:	f023 0310 	bic.w	r3, r3, #16
 8003b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	330c      	adds	r3, #12
 8003b84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b90:	e841 2300 	strex	r3, r2, [r1]
 8003b94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1e3      	bne.n	8003b64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fe fe64 	bl	800286e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f8b7 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc2:	e09b      	b.n	8003cfc <HAL_UART_IRQHandler+0x518>
 8003bc4:	08003f35 	.word	0x08003f35
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 808e 	beq.w	8003d00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003be4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8089 	beq.w	8003d00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	330c      	adds	r3, #12
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	330c      	adds	r3, #12
 8003c0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e3      	bne.n	8003bee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	3314      	adds	r3, #20
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	623b      	str	r3, [r7, #32]
   return(result);
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	f023 0301 	bic.w	r3, r3, #1
 8003c3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3314      	adds	r3, #20
 8003c46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c52:	e841 2300 	strex	r3, r2, [r1]
 8003c56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1e3      	bne.n	8003c26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2220      	movs	r2, #32
 8003c62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	330c      	adds	r3, #12
 8003c72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	e853 3f00 	ldrex	r3, [r3]
 8003c7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0310 	bic.w	r3, r3, #16
 8003c82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	330c      	adds	r3, #12
 8003c8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c90:	61fa      	str	r2, [r7, #28]
 8003c92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	69b9      	ldr	r1, [r7, #24]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e3      	bne.n	8003c6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003caa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003cae:	4619      	mov	r1, r3
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 f83d 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003cb6:	e023      	b.n	8003d00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d009      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x4f4>
 8003cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f943 	bl	8003f5c <UART_Transmit_IT>
    return;
 8003cd6:	e014      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00e      	beq.n	8003d02 <HAL_UART_IRQHandler+0x51e>
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d008      	beq.n	8003d02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f000 f983 	bl	8003ffc <UART_EndTransmit_IT>
    return;
 8003cf6:	e004      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
    return;
 8003cf8:	bf00      	nop
 8003cfa:	e002      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cfc:	bf00      	nop
 8003cfe:	e000      	b.n	8003d02 <HAL_UART_IRQHandler+0x51e>
      return;
 8003d00:	bf00      	nop
  }
}
 8003d02:	37e8      	adds	r7, #232	@ 0xe8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d58:	e03b      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d037      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d62:	f7fd fddb 	bl	800191c <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	6a3a      	ldr	r2, [r7, #32]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d302      	bcc.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e03a      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0304 	and.w	r3, r3, #4
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d023      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b80      	cmp	r3, #128	@ 0x80
 8003d8e:	d020      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d01d      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d116      	bne.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003da4:	2300      	movs	r3, #0
 8003da6:	617b      	str	r3, [r7, #20]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	617b      	str	r3, [r7, #20]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f857 	bl	8003e6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e00f      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
 8003dea:	79fb      	ldrb	r3, [r7, #7]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d0b4      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3718      	adds	r7, #24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}

08003dfa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b085      	sub	sp, #20
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	68ba      	ldr	r2, [r7, #8]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	88fa      	ldrh	r2, [r7, #6]
 8003e12:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2222      	movs	r2, #34	@ 0x22
 8003e24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68da      	ldr	r2, [r3, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b095      	sub	sp, #84	@ 0x54
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	330c      	adds	r3, #12
 8003e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e80:	e853 3f00 	ldrex	r3, [r3]
 8003e84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	330c      	adds	r3, #12
 8003e94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e96:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e9e:	e841 2300 	strex	r3, r2, [r1]
 8003ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1e5      	bne.n	8003e76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3314      	adds	r3, #20
 8003eb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f023 0301 	bic.w	r3, r3, #1
 8003ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3314      	adds	r3, #20
 8003ec8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003eca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ed0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e5      	bne.n	8003eaa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d119      	bne.n	8003f1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	330c      	adds	r3, #12
 8003eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0310 	bic.w	r3, r3, #16
 8003efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f06:	61ba      	str	r2, [r7, #24]
 8003f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	613b      	str	r3, [r7, #16]
   return(result);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e5      	bne.n	8003ee6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003f28:	bf00      	nop
 8003f2a:	3754      	adds	r7, #84	@ 0x54
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f7ff fee4 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b21      	cmp	r3, #33	@ 0x21
 8003f6e:	d13e      	bne.n	8003fee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f78:	d114      	bne.n	8003fa4 <UART_Transmit_IT+0x48>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d110      	bne.n	8003fa4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	881b      	ldrh	r3, [r3, #0]
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f96:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	1c9a      	adds	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	621a      	str	r2, [r3, #32]
 8003fa2:	e008      	b.n	8003fb6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a1b      	ldr	r3, [r3, #32]
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	6211      	str	r1, [r2, #32]
 8003fae:	781a      	ldrb	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fd8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68da      	ldr	r2, [r3, #12]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fe8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3714      	adds	r7, #20
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004012:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	f7ff fe73 	bl	8003d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08c      	sub	sp, #48	@ 0x30
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b22      	cmp	r3, #34	@ 0x22
 800403e:	f040 80ae 	bne.w	800419e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800404a:	d117      	bne.n	800407c <UART_Receive_IT+0x50>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d113      	bne.n	800407c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	b29b      	uxth	r3, r3
 8004066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406a:	b29a      	uxth	r2, r3
 800406c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	1c9a      	adds	r2, r3, #2
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	629a      	str	r2, [r3, #40]	@ 0x28
 800407a:	e026      	b.n	80040ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004082:	2300      	movs	r3, #0
 8004084:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800408e:	d007      	beq.n	80040a0 <UART_Receive_IT+0x74>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <UART_Receive_IT+0x82>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040aa:	701a      	strb	r2, [r3, #0]
 80040ac:	e008      	b.n	80040c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	3b01      	subs	r3, #1
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	4619      	mov	r1, r3
 80040d8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d15d      	bne.n	800419a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0220 	bic.w	r2, r2, #32
 80040ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68da      	ldr	r2, [r3, #12]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	695a      	ldr	r2, [r3, #20]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0201 	bic.w	r2, r2, #1
 800410c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	2b01      	cmp	r3, #1
 8004122:	d135      	bne.n	8004190 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	e853 3f00 	ldrex	r3, [r3]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f023 0310 	bic.w	r3, r3, #16
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800414a:	623a      	str	r2, [r7, #32]
 800414c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414e:	69f9      	ldr	r1, [r7, #28]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	e841 2300 	strex	r3, r2, [r1]
 8004156:	61bb      	str	r3, [r7, #24]
   return(result);
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1e5      	bne.n	800412a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b10      	cmp	r3, #16
 800416a:	d10a      	bne.n	8004182 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800416c:	2300      	movs	r3, #0
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004186:	4619      	mov	r1, r3
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f7ff fdd1 	bl	8003d30 <HAL_UARTEx_RxEventCallback>
 800418e:	e002      	b.n	8004196 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7fc fef1 	bl	8000f78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004196:	2300      	movs	r3, #0
 8004198:	e002      	b.n	80041a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	e000      	b.n	80041a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800419e:	2302      	movs	r3, #2
  }
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3730      	adds	r7, #48	@ 0x30
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041ac:	b0c0      	sub	sp, #256	@ 0x100
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	68d9      	ldr	r1, [r3, #12]
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	ea40 0301 	orr.w	r3, r0, r1
 80041d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	431a      	orrs	r2, r3
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004200:	f021 010c 	bic.w	r1, r1, #12
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800420e:	430b      	orrs	r3, r1
 8004210:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	6999      	ldr	r1, [r3, #24]
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	ea40 0301 	orr.w	r3, r0, r1
 800422e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b8f      	ldr	r3, [pc, #572]	@ (8004474 <UART_SetConfig+0x2cc>)
 8004238:	429a      	cmp	r2, r3
 800423a:	d005      	beq.n	8004248 <UART_SetConfig+0xa0>
 800423c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	4b8d      	ldr	r3, [pc, #564]	@ (8004478 <UART_SetConfig+0x2d0>)
 8004244:	429a      	cmp	r2, r3
 8004246:	d104      	bne.n	8004252 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004248:	f7ff f9b8 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 800424c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004250:	e003      	b.n	800425a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004252:	f7ff f99f 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004256:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800425a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425e:	69db      	ldr	r3, [r3, #28]
 8004260:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004264:	f040 810c 	bne.w	8004480 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800426c:	2200      	movs	r2, #0
 800426e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004272:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004276:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800427a:	4622      	mov	r2, r4
 800427c:	462b      	mov	r3, r5
 800427e:	1891      	adds	r1, r2, r2
 8004280:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004282:	415b      	adcs	r3, r3
 8004284:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004286:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800428a:	4621      	mov	r1, r4
 800428c:	eb12 0801 	adds.w	r8, r2, r1
 8004290:	4629      	mov	r1, r5
 8004292:	eb43 0901 	adc.w	r9, r3, r1
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	f04f 0300 	mov.w	r3, #0
 800429e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042aa:	4690      	mov	r8, r2
 80042ac:	4699      	mov	r9, r3
 80042ae:	4623      	mov	r3, r4
 80042b0:	eb18 0303 	adds.w	r3, r8, r3
 80042b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042b8:	462b      	mov	r3, r5
 80042ba:	eb49 0303 	adc.w	r3, r9, r3
 80042be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042d6:	460b      	mov	r3, r1
 80042d8:	18db      	adds	r3, r3, r3
 80042da:	653b      	str	r3, [r7, #80]	@ 0x50
 80042dc:	4613      	mov	r3, r2
 80042de:	eb42 0303 	adc.w	r3, r2, r3
 80042e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80042e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042ec:	f7fc fb8a 	bl	8000a04 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4b61      	ldr	r3, [pc, #388]	@ (800447c <UART_SetConfig+0x2d4>)
 80042f6:	fba3 2302 	umull	r2, r3, r3, r2
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	011c      	lsls	r4, r3, #4
 80042fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004308:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800430c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004310:	4642      	mov	r2, r8
 8004312:	464b      	mov	r3, r9
 8004314:	1891      	adds	r1, r2, r2
 8004316:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004318:	415b      	adcs	r3, r3
 800431a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800431c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004320:	4641      	mov	r1, r8
 8004322:	eb12 0a01 	adds.w	sl, r2, r1
 8004326:	4649      	mov	r1, r9
 8004328:	eb43 0b01 	adc.w	fp, r3, r1
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004338:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800433c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004340:	4692      	mov	sl, r2
 8004342:	469b      	mov	fp, r3
 8004344:	4643      	mov	r3, r8
 8004346:	eb1a 0303 	adds.w	r3, sl, r3
 800434a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800434e:	464b      	mov	r3, r9
 8004350:	eb4b 0303 	adc.w	r3, fp, r3
 8004354:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004364:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004368:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800436c:	460b      	mov	r3, r1
 800436e:	18db      	adds	r3, r3, r3
 8004370:	643b      	str	r3, [r7, #64]	@ 0x40
 8004372:	4613      	mov	r3, r2
 8004374:	eb42 0303 	adc.w	r3, r2, r3
 8004378:	647b      	str	r3, [r7, #68]	@ 0x44
 800437a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800437e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004382:	f7fc fb3f 	bl	8000a04 <__aeabi_uldivmod>
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4611      	mov	r1, r2
 800438c:	4b3b      	ldr	r3, [pc, #236]	@ (800447c <UART_SetConfig+0x2d4>)
 800438e:	fba3 2301 	umull	r2, r3, r3, r1
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	2264      	movs	r2, #100	@ 0x64
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	1acb      	subs	r3, r1, r3
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043a2:	4b36      	ldr	r3, [pc, #216]	@ (800447c <UART_SetConfig+0x2d4>)
 80043a4:	fba3 2302 	umull	r2, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043b0:	441c      	add	r4, r3
 80043b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043b6:	2200      	movs	r2, #0
 80043b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043c4:	4642      	mov	r2, r8
 80043c6:	464b      	mov	r3, r9
 80043c8:	1891      	adds	r1, r2, r2
 80043ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043cc:	415b      	adcs	r3, r3
 80043ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043d4:	4641      	mov	r1, r8
 80043d6:	1851      	adds	r1, r2, r1
 80043d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80043da:	4649      	mov	r1, r9
 80043dc:	414b      	adcs	r3, r1
 80043de:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043ec:	4659      	mov	r1, fp
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	4651      	mov	r1, sl
 80043f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043f6:	4651      	mov	r1, sl
 80043f8:	00ca      	lsls	r2, r1, #3
 80043fa:	4610      	mov	r0, r2
 80043fc:	4619      	mov	r1, r3
 80043fe:	4603      	mov	r3, r0
 8004400:	4642      	mov	r2, r8
 8004402:	189b      	adds	r3, r3, r2
 8004404:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004408:	464b      	mov	r3, r9
 800440a:	460a      	mov	r2, r1
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004420:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004424:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004428:	460b      	mov	r3, r1
 800442a:	18db      	adds	r3, r3, r3
 800442c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800442e:	4613      	mov	r3, r2
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004436:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800443a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800443e:	f7fc fae1 	bl	8000a04 <__aeabi_uldivmod>
 8004442:	4602      	mov	r2, r0
 8004444:	460b      	mov	r3, r1
 8004446:	4b0d      	ldr	r3, [pc, #52]	@ (800447c <UART_SetConfig+0x2d4>)
 8004448:	fba3 1302 	umull	r1, r3, r3, r2
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	2164      	movs	r1, #100	@ 0x64
 8004450:	fb01 f303 	mul.w	r3, r1, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	3332      	adds	r3, #50	@ 0x32
 800445a:	4a08      	ldr	r2, [pc, #32]	@ (800447c <UART_SetConfig+0x2d4>)
 800445c:	fba2 2303 	umull	r2, r3, r2, r3
 8004460:	095b      	lsrs	r3, r3, #5
 8004462:	f003 0207 	and.w	r2, r3, #7
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4422      	add	r2, r4
 800446e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004470:	e106      	b.n	8004680 <UART_SetConfig+0x4d8>
 8004472:	bf00      	nop
 8004474:	40011000 	.word	0x40011000
 8004478:	40011400 	.word	0x40011400
 800447c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004484:	2200      	movs	r2, #0
 8004486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800448a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800448e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004492:	4642      	mov	r2, r8
 8004494:	464b      	mov	r3, r9
 8004496:	1891      	adds	r1, r2, r2
 8004498:	6239      	str	r1, [r7, #32]
 800449a:	415b      	adcs	r3, r3
 800449c:	627b      	str	r3, [r7, #36]	@ 0x24
 800449e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044a2:	4641      	mov	r1, r8
 80044a4:	1854      	adds	r4, r2, r1
 80044a6:	4649      	mov	r1, r9
 80044a8:	eb43 0501 	adc.w	r5, r3, r1
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	00eb      	lsls	r3, r5, #3
 80044b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ba:	00e2      	lsls	r2, r4, #3
 80044bc:	4614      	mov	r4, r2
 80044be:	461d      	mov	r5, r3
 80044c0:	4643      	mov	r3, r8
 80044c2:	18e3      	adds	r3, r4, r3
 80044c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044c8:	464b      	mov	r3, r9
 80044ca:	eb45 0303 	adc.w	r3, r5, r3
 80044ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044ee:	4629      	mov	r1, r5
 80044f0:	008b      	lsls	r3, r1, #2
 80044f2:	4621      	mov	r1, r4
 80044f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044f8:	4621      	mov	r1, r4
 80044fa:	008a      	lsls	r2, r1, #2
 80044fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004500:	f7fc fa80 	bl	8000a04 <__aeabi_uldivmod>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4b60      	ldr	r3, [pc, #384]	@ (800468c <UART_SetConfig+0x4e4>)
 800450a:	fba3 2302 	umull	r2, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	011c      	lsls	r4, r3, #4
 8004512:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004516:	2200      	movs	r2, #0
 8004518:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800451c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004520:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004524:	4642      	mov	r2, r8
 8004526:	464b      	mov	r3, r9
 8004528:	1891      	adds	r1, r2, r2
 800452a:	61b9      	str	r1, [r7, #24]
 800452c:	415b      	adcs	r3, r3
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004534:	4641      	mov	r1, r8
 8004536:	1851      	adds	r1, r2, r1
 8004538:	6139      	str	r1, [r7, #16]
 800453a:	4649      	mov	r1, r9
 800453c:	414b      	adcs	r3, r1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800454c:	4659      	mov	r1, fp
 800454e:	00cb      	lsls	r3, r1, #3
 8004550:	4651      	mov	r1, sl
 8004552:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004556:	4651      	mov	r1, sl
 8004558:	00ca      	lsls	r2, r1, #3
 800455a:	4610      	mov	r0, r2
 800455c:	4619      	mov	r1, r3
 800455e:	4603      	mov	r3, r0
 8004560:	4642      	mov	r2, r8
 8004562:	189b      	adds	r3, r3, r2
 8004564:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004568:	464b      	mov	r3, r9
 800456a:	460a      	mov	r2, r1
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800457e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004580:	f04f 0200 	mov.w	r2, #0
 8004584:	f04f 0300 	mov.w	r3, #0
 8004588:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800458c:	4649      	mov	r1, r9
 800458e:	008b      	lsls	r3, r1, #2
 8004590:	4641      	mov	r1, r8
 8004592:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004596:	4641      	mov	r1, r8
 8004598:	008a      	lsls	r2, r1, #2
 800459a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800459e:	f7fc fa31 	bl	8000a04 <__aeabi_uldivmod>
 80045a2:	4602      	mov	r2, r0
 80045a4:	460b      	mov	r3, r1
 80045a6:	4611      	mov	r1, r2
 80045a8:	4b38      	ldr	r3, [pc, #224]	@ (800468c <UART_SetConfig+0x4e4>)
 80045aa:	fba3 2301 	umull	r2, r3, r3, r1
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2264      	movs	r2, #100	@ 0x64
 80045b2:	fb02 f303 	mul.w	r3, r2, r3
 80045b6:	1acb      	subs	r3, r1, r3
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	3332      	adds	r3, #50	@ 0x32
 80045bc:	4a33      	ldr	r2, [pc, #204]	@ (800468c <UART_SetConfig+0x4e4>)
 80045be:	fba2 2303 	umull	r2, r3, r2, r3
 80045c2:	095b      	lsrs	r3, r3, #5
 80045c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045c8:	441c      	add	r4, r3
 80045ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ce:	2200      	movs	r2, #0
 80045d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80045d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80045d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045d8:	4642      	mov	r2, r8
 80045da:	464b      	mov	r3, r9
 80045dc:	1891      	adds	r1, r2, r2
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	415b      	adcs	r3, r3
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045e8:	4641      	mov	r1, r8
 80045ea:	1851      	adds	r1, r2, r1
 80045ec:	6039      	str	r1, [r7, #0]
 80045ee:	4649      	mov	r1, r9
 80045f0:	414b      	adcs	r3, r1
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004600:	4659      	mov	r1, fp
 8004602:	00cb      	lsls	r3, r1, #3
 8004604:	4651      	mov	r1, sl
 8004606:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800460a:	4651      	mov	r1, sl
 800460c:	00ca      	lsls	r2, r1, #3
 800460e:	4610      	mov	r0, r2
 8004610:	4619      	mov	r1, r3
 8004612:	4603      	mov	r3, r0
 8004614:	4642      	mov	r2, r8
 8004616:	189b      	adds	r3, r3, r2
 8004618:	66bb      	str	r3, [r7, #104]	@ 0x68
 800461a:	464b      	mov	r3, r9
 800461c:	460a      	mov	r2, r1
 800461e:	eb42 0303 	adc.w	r3, r2, r3
 8004622:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	663b      	str	r3, [r7, #96]	@ 0x60
 800462e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800463c:	4649      	mov	r1, r9
 800463e:	008b      	lsls	r3, r1, #2
 8004640:	4641      	mov	r1, r8
 8004642:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004646:	4641      	mov	r1, r8
 8004648:	008a      	lsls	r2, r1, #2
 800464a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800464e:	f7fc f9d9 	bl	8000a04 <__aeabi_uldivmod>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4b0d      	ldr	r3, [pc, #52]	@ (800468c <UART_SetConfig+0x4e4>)
 8004658:	fba3 1302 	umull	r1, r3, r3, r2
 800465c:	095b      	lsrs	r3, r3, #5
 800465e:	2164      	movs	r1, #100	@ 0x64
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	3332      	adds	r3, #50	@ 0x32
 800466a:	4a08      	ldr	r2, [pc, #32]	@ (800468c <UART_SetConfig+0x4e4>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	f003 020f 	and.w	r2, r3, #15
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4422      	add	r2, r4
 800467e:	609a      	str	r2, [r3, #8]
}
 8004680:	bf00      	nop
 8004682:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004686:	46bd      	mov	sp, r7
 8004688:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800468c:	51eb851f 	.word	0x51eb851f

08004690 <memset>:
 8004690:	4402      	add	r2, r0
 8004692:	4603      	mov	r3, r0
 8004694:	4293      	cmp	r3, r2
 8004696:	d100      	bne.n	800469a <memset+0xa>
 8004698:	4770      	bx	lr
 800469a:	f803 1b01 	strb.w	r1, [r3], #1
 800469e:	e7f9      	b.n	8004694 <memset+0x4>

080046a0 <__libc_init_array>:
 80046a0:	b570      	push	{r4, r5, r6, lr}
 80046a2:	4d0d      	ldr	r5, [pc, #52]	@ (80046d8 <__libc_init_array+0x38>)
 80046a4:	4c0d      	ldr	r4, [pc, #52]	@ (80046dc <__libc_init_array+0x3c>)
 80046a6:	1b64      	subs	r4, r4, r5
 80046a8:	10a4      	asrs	r4, r4, #2
 80046aa:	2600      	movs	r6, #0
 80046ac:	42a6      	cmp	r6, r4
 80046ae:	d109      	bne.n	80046c4 <__libc_init_array+0x24>
 80046b0:	4d0b      	ldr	r5, [pc, #44]	@ (80046e0 <__libc_init_array+0x40>)
 80046b2:	4c0c      	ldr	r4, [pc, #48]	@ (80046e4 <__libc_init_array+0x44>)
 80046b4:	f000 f818 	bl	80046e8 <_init>
 80046b8:	1b64      	subs	r4, r4, r5
 80046ba:	10a4      	asrs	r4, r4, #2
 80046bc:	2600      	movs	r6, #0
 80046be:	42a6      	cmp	r6, r4
 80046c0:	d105      	bne.n	80046ce <__libc_init_array+0x2e>
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80046c8:	4798      	blx	r3
 80046ca:	3601      	adds	r6, #1
 80046cc:	e7ee      	b.n	80046ac <__libc_init_array+0xc>
 80046ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d2:	4798      	blx	r3
 80046d4:	3601      	adds	r6, #1
 80046d6:	e7f2      	b.n	80046be <__libc_init_array+0x1e>
 80046d8:	08004720 	.word	0x08004720
 80046dc:	08004720 	.word	0x08004720
 80046e0:	08004720 	.word	0x08004720
 80046e4:	08004724 	.word	0x08004724

080046e8 <_init>:
 80046e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ea:	bf00      	nop
 80046ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ee:	bc08      	pop	{r3}
 80046f0:	469e      	mov	lr, r3
 80046f2:	4770      	bx	lr

080046f4 <_fini>:
 80046f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f6:	bf00      	nop
 80046f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046fa:	bc08      	pop	{r3}
 80046fc:	469e      	mov	lr, r3
 80046fe:	4770      	bx	lr
